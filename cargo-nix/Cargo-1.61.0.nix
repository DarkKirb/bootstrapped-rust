# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "bootstrap/default"
    "rustc-main/default"
    "rustc_codegen_ssa/default"
    "rustc_apfloat/default"
    "rustc_arena/default"
    "rustc_ast/default"
    "rustc_data_structures/default"
    "rustc_graphviz/default"
    "rustc_index/default"
    "rustc_macros/default"
    "rustc_serialize/default"
    "rustc_lexer/default"
    "rustc_span/default"
    "rustc_attr/default"
    "rustc_ast_pretty/default"
    "rustc_errors/default"
    "rustc_lint_defs/default"
    "rustc_hir/default"
    "rustc_feature/default"
    "rustc_target/default"
    "rustc_session/default"
    "rustc_fs_util/default"
    "rustc_incremental/default"
    "rustc_middle/default"
    "rustc_query_system/default"
    "rustc_type_ir/default"
    "rustc_metadata/default"
    "rustc_expand/default"
    "rustc_ast_passes/default"
    "rustc_parse/default"
    "rustc_hir_pretty/default"
    "rustc_symbol_mangling/default"
    "rustc_driver/default"
    "rustc_const_eval/default"
    "rustc_infer/default"
    "rustc_mir_dataflow/default"
    "rustc_trait_selection/default"
    "rustc_parse_format/default"
    "rustc_error_codes/default"
    "rustc_interface/default"
    "rustc_ast_lowering/default"
    "rustc_borrowck/default"
    "rustc_traits/default"
    "rustc_builtin_macros/default"
    "rustc_codegen_llvm/default"
    "rustc_llvm/default"
    "rustc_lint/default"
    "rustc_mir_build/default"
    "rustc_mir_transform/default"
    "coverage_test_macros/default"
    "rustc_monomorphize/default"
    "rustc_passes/default"
    "rustc_plugin_impl/default"
    "rustc_privacy/default"
    "rustc_typeck/default"
    "rustc_ty_utils/default"
    "rustc_query_impl/default"
    "rustc_resolve/default"
    "rustc_log/default"
    "rustc_save_analysis/default"
    "std/default"
    "alloc/default"
    "core/default"
    "panic_abort/default"
    "panic_unwind/default"
    "unwind/default"
    "profiler_builtins/default"
    "test/default"
    "proc_macro/default"
    "rustdoc-json-types/default"
    "cargotest2/default"
    "clippy/default"
    "clippy_lints/default"
    "clippy_utils/default"
    "rustc_tools_util/default"
    "clippy_dev/default"
    "compiletest/default"
    "error_index_generator/default"
    "rustdoc/default"
    "linkchecker/default"
    "lint-docs/default"
    "rustbook/default"
    "unstable-book-gen/default"
    "tidy/default"
    "tier-check/default"
    "build-manifest/default"
    "remote-test-client/default"
    "remote-test-server/default"
    "installer/default"
    "rust-demangler/default"
    "cargo/default"
    "cargo-platform/default"
    "cargo-util/default"
    "crates-io/default"
    "cargo-test-macro/default"
    "cargo-test-support/default"
    "cargo-credential-1password/default"
    "cargo-credential/default"
    "cargo-credential-macos-keychain/default"
    "cargo-credential-wincred/default"
    "rustdoc-tool/default"
    "rls/default"
    "rls-analysis/default"
    "rls-ipc/default"
    "rls-rustc/default"
    "rustfmt-nightly/default"
    "rustfmt-config_proc_macro/default"
    "miri/default"
    "cargo-miri/default"
    "rustdoc-themes/default"
    "unicode-bdd/default"
    "expand-yaml-anchors/default"
    "jsondocck/default"
    "html-checker/default"
    "bump-stage0/default"
    "lld-wrapper/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
}:
let
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
in let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
    dev = builtins.fromTOML "debug = 0\n[package.bootstrap]\ndebug = 1\n";
    release = builtins.fromTOML "[package.addr2line]\ndebug = 0\n\n[package.adler]\ndebug = 0\n\n[package.compiler_builtins]\ncodegen-units = 10000\ndebug-assertions = false\noverflow-checks = false\n\n[package.gimli]\ndebug = 0\n\n[package.miniz_oxide]\ndebug = 0\n\n[package.object]\ndebug = 0\n\n[package.rustc-rayon-core]\noverflow-checks = false\n";
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    bootstrap = rustPackages.unknown.bootstrap."0.0.0";
    rustc-main = rustPackages.unknown.rustc-main."0.0.0";
    rustc_codegen_ssa = rustPackages.unknown.rustc_codegen_ssa."0.0.0";
    rustc_apfloat = rustPackages.unknown.rustc_apfloat."0.0.0";
    rustc_arena = rustPackages.unknown.rustc_arena."0.0.0";
    rustc_ast = rustPackages.unknown.rustc_ast."0.0.0";
    rustc_data_structures = rustPackages.unknown.rustc_data_structures."0.0.0";
    rustc_graphviz = rustPackages.unknown.rustc_graphviz."0.0.0";
    rustc_index = rustPackages.unknown.rustc_index."0.0.0";
    rustc_macros = rustPackages.unknown.rustc_macros."0.1.0";
    rustc_serialize = rustPackages.unknown.rustc_serialize."0.0.0";
    rustc_lexer = rustPackages.unknown.rustc_lexer."0.1.0";
    rustc_span = rustPackages.unknown.rustc_span."0.0.0";
    rustc_attr = rustPackages.unknown.rustc_attr."0.0.0";
    rustc_ast_pretty = rustPackages.unknown.rustc_ast_pretty."0.0.0";
    rustc_errors = rustPackages.unknown.rustc_errors."0.0.0";
    rustc_lint_defs = rustPackages.unknown.rustc_lint_defs."0.0.0";
    rustc_hir = rustPackages.unknown.rustc_hir."0.0.0";
    rustc_feature = rustPackages.unknown.rustc_feature."0.0.0";
    rustc_target = rustPackages.unknown.rustc_target."0.0.0";
    rustc_session = rustPackages.unknown.rustc_session."0.0.0";
    rustc_fs_util = rustPackages.unknown.rustc_fs_util."0.0.0";
    rustc_incremental = rustPackages.unknown.rustc_incremental."0.0.0";
    rustc_middle = rustPackages.unknown.rustc_middle."0.0.0";
    rustc_query_system = rustPackages.unknown.rustc_query_system."0.0.0";
    rustc_type_ir = rustPackages.unknown.rustc_type_ir."0.0.0";
    rustc_metadata = rustPackages.unknown.rustc_metadata."0.0.0";
    rustc_expand = rustPackages.unknown.rustc_expand."0.0.0";
    rustc_ast_passes = rustPackages.unknown.rustc_ast_passes."0.0.0";
    rustc_parse = rustPackages.unknown.rustc_parse."0.0.0";
    rustc_hir_pretty = rustPackages.unknown.rustc_hir_pretty."0.0.0";
    rustc_symbol_mangling = rustPackages.unknown.rustc_symbol_mangling."0.0.0";
    rustc_driver = rustPackages.unknown.rustc_driver."0.0.0";
    rustc_const_eval = rustPackages.unknown.rustc_const_eval."0.0.0";
    rustc_infer = rustPackages.unknown.rustc_infer."0.0.0";
    rustc_mir_dataflow = rustPackages.unknown.rustc_mir_dataflow."0.0.0";
    rustc_trait_selection = rustPackages.unknown.rustc_trait_selection."0.0.0";
    rustc_parse_format = rustPackages.unknown.rustc_parse_format."0.0.0";
    rustc_error_codes = rustPackages.unknown.rustc_error_codes."0.0.0";
    rustc_interface = rustPackages.unknown.rustc_interface."0.0.0";
    rustc_ast_lowering = rustPackages.unknown.rustc_ast_lowering."0.0.0";
    rustc_borrowck = rustPackages.unknown.rustc_borrowck."0.0.0";
    rustc_traits = rustPackages.unknown.rustc_traits."0.0.0";
    rustc_builtin_macros = rustPackages.unknown.rustc_builtin_macros."0.0.0";
    rustc_codegen_llvm = rustPackages.unknown.rustc_codegen_llvm."0.0.0";
    rustc_llvm = rustPackages.unknown.rustc_llvm."0.0.0";
    rustc_lint = rustPackages.unknown.rustc_lint."0.0.0";
    rustc_mir_build = rustPackages.unknown.rustc_mir_build."0.0.0";
    rustc_mir_transform = rustPackages.unknown.rustc_mir_transform."0.0.0";
    coverage_test_macros = rustPackages.unknown.coverage_test_macros."0.0.0";
    rustc_monomorphize = rustPackages.unknown.rustc_monomorphize."0.0.0";
    rustc_passes = rustPackages.unknown.rustc_passes."0.0.0";
    rustc_plugin_impl = rustPackages.unknown.rustc_plugin_impl."0.0.0";
    rustc_privacy = rustPackages.unknown.rustc_privacy."0.0.0";
    rustc_typeck = rustPackages.unknown.rustc_typeck."0.0.0";
    rustc_ty_utils = rustPackages.unknown.rustc_ty_utils."0.0.0";
    rustc_query_impl = rustPackages.unknown.rustc_query_impl."0.0.0";
    rustc_resolve = rustPackages.unknown.rustc_resolve."0.0.0";
    rustc_log = rustPackages.unknown.rustc_log."0.0.0";
    rustc_save_analysis = rustPackages.unknown.rustc_save_analysis."0.0.0";
    std = rustPackages.unknown.std."0.0.0";
    alloc = rustPackages.unknown.alloc."0.0.0";
    core = rustPackages.unknown.core."0.0.0";
    panic_abort = rustPackages.unknown.panic_abort."0.0.0";
    panic_unwind = rustPackages.unknown.panic_unwind."0.0.0";
    unwind = rustPackages.unknown.unwind."0.0.0";
    profiler_builtins = rustPackages.unknown.profiler_builtins."0.0.0";
    test = rustPackages.unknown.test."0.0.0";
    proc_macro = rustPackages.unknown.proc_macro."0.0.0";
    rustdoc-json-types = rustPackages.unknown.rustdoc-json-types."0.1.0";
    cargotest2 = rustPackages.unknown.cargotest2."0.1.0";
    clippy = rustPackages.unknown.clippy."0.1.61";
    clippy_lints = rustPackages.unknown.clippy_lints."0.1.61";
    clippy_utils = rustPackages.unknown.clippy_utils."0.1.61";
    rustc_tools_util = rustPackages.unknown.rustc_tools_util."0.2.0";
    clippy_dev = rustPackages.unknown.clippy_dev."0.0.1";
    compiletest = rustPackages.unknown.compiletest."0.0.0";
    error_index_generator = rustPackages.unknown.error_index_generator."0.0.0";
    rustdoc = rustPackages.unknown.rustdoc."0.0.0";
    linkchecker = rustPackages.unknown.linkchecker."0.1.0";
    lint-docs = rustPackages.unknown.lint-docs."0.1.0";
    rustbook = rustPackages.unknown.rustbook."0.1.0";
    unstable-book-gen = rustPackages.unknown.unstable-book-gen."0.1.0";
    tidy = rustPackages.unknown.tidy."0.1.0";
    tier-check = rustPackages.unknown.tier-check."0.1.0";
    build-manifest = rustPackages.unknown.build-manifest."0.1.0";
    remote-test-client = rustPackages.unknown.remote-test-client."0.1.0";
    remote-test-server = rustPackages.unknown.remote-test-server."0.1.0";
    installer = rustPackages.unknown.installer."0.0.0";
    rust-demangler = rustPackages.unknown.rust-demangler."0.0.1";
    cargo = rustPackages.unknown.cargo."0.62.0";
    cargo-platform = rustPackages.unknown.cargo-platform."0.1.2";
    cargo-util = rustPackages.unknown.cargo-util."0.1.2";
    crates-io = rustPackages.unknown.crates-io."0.34.0";
    cargo-test-macro = rustPackages.unknown.cargo-test-macro."0.1.0";
    cargo-test-support = rustPackages.unknown.cargo-test-support."0.1.0";
    cargo-credential-1password = rustPackages.unknown.cargo-credential-1password."0.1.0";
    cargo-credential = rustPackages.unknown.cargo-credential."0.1.0";
    cargo-credential-macos-keychain = rustPackages.unknown.cargo-credential-macos-keychain."0.1.0";
    cargo-credential-wincred = rustPackages.unknown.cargo-credential-wincred."0.1.0";
    rustdoc-tool = rustPackages.unknown.rustdoc-tool."0.0.0";
    rls = rustPackages.unknown.rls."1.41.0";
    rls-analysis = rustPackages.unknown.rls-analysis."0.18.3";
    rls-ipc = rustPackages.unknown.rls-ipc."0.1.0";
    rls-rustc = rustPackages.unknown.rls-rustc."0.6.0";
    rustfmt-nightly = rustPackages.unknown.rustfmt-nightly."1.4.38";
    rustfmt-config_proc_macro = rustPackages.unknown.rustfmt-config_proc_macro."0.2.0";
    miri = rustPackages.unknown.miri."0.1.0";
    cargo-miri = rustPackages.unknown.cargo-miri."0.1.0";
    rustdoc-themes = rustPackages.unknown.rustdoc-themes."0.1.0";
    unicode-bdd = rustPackages.unknown.unicode-bdd."0.1.0";
    expand-yaml-anchors = rustPackages.unknown.expand-yaml-anchors."0.1.0";
    jsondocck = rustPackages.unknown.jsondocck."0.1.0";
    html-checker = rustPackages.unknown.html-checker."0.1.0";
    bump-stage0 = rustPackages.unknown.bump-stage0."0.1.0";
    lld-wrapper = rustPackages.unknown.lld-wrapper."0.1.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e61f2b7f93d2c7d2b08263acaa4a363b3e276806c68af6134c44f523bf1aacd"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "alloc")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "compiler_builtins")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "core")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "rustc-dep-of-std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "compiler_builtins" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      ${ if rootFeatures' ? "std/addr2line" || rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "gimli" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "alloc" else null } = rustPackages."unknown".rustc-std-workspace-alloc."1.99.0" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "core" else null } = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "adler";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "compiler_builtins")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "core")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "rustc-dep-of-std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "compiler_builtins" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "core" else null } = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "43bb833f0bf979d8475d38fbf09ed3b8a55e1885fe93ad3f93239fc6a4f17b98"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.7.2" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.18" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "0.7.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
    };
  });
  
  "unknown".alloc."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "alloc";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/alloc");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "alloc/compiler-builtins-c" || rootFeatures' ? "std/compiler-builtins-c" || rootFeatures' ? "test/compiler-builtins-c") "compiler-builtins-c")
      (lib.optional (rootFeatures' ? "alloc/compiler-builtins-mangled-names" || rootFeatures' ? "std/compiler-builtins-mangled-names" || rootFeatures' ? "test/compiler-builtins-mangled-names") "compiler-builtins-mangled-names")
      (lib.optional (rootFeatures' ? "alloc/compiler-builtins-mem" || rootFeatures' ? "std/compiler-builtins-mem" || rootFeatures' ? "test/compiler-builtins-mem") "compiler-builtins-mem")
      (lib.optional (rootFeatures' ? "alloc/compiler-builtins-no-asm" || rootFeatures' ? "std/compiler-builtins-no-asm" || rootFeatures' ? "test/compiler-builtins-no-asm") "compiler-builtins-no-asm")
    ];
    dependencies = {
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      core = rustPackages."unknown".core."0.0.0" { inherit profileName; };
    };
    devDependencies = {
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      rand_xorshift = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_xorshift."0.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ammonia."3.1.3" = overridableMkRustCrate (profileName: rec {
    name = "ammonia";
    version = "3.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b74b175af97d1aecc1add0878b1cbfcbf3bd4c22d7713eeb6d597da23e29bc0d"; };
    dependencies = {
      html5ever = rustPackages."registry+https://github.com/rust-lang/crates.io-index".html5ever."0.25.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      maplit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".maplit."1.0.2" { inherit profileName; };
      markup5ever_rcdom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".markup5ever_rcdom."0.1.0" { inherit profileName; };
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
      tendril = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tendril."0.4.1" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".annotate-snippets."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "annotate-snippets";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d78ea013094e5ea606b1c05fe35f1dd7ea1eb1ea259908d040b25bd5ec677ee5"; };
    features = builtins.concatLists [
      [ "color" ]
      [ "default" ]
      [ "yansi-term" ]
    ];
    dependencies = {
      yansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".yansi-term."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "ansi_term";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" = overridableMkRustCrate (profileName: rec {
    name = "anyhow";
    version = "1.0.51";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b26702f315f53b6071259e15dd9d64528213b44d61de1ec926eca7715d62203"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".array_tool."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "array_tool";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f8cb5d814eb646a863c4f24978cff2880c4be96ad8cde2c0f0678732902e271"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a2f58b0bb10c380af2b26e57212856b8c9a59e0925b4c20f4a174a49734eaf7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".askama."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "askama";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d8f355701c672c2ba3d718acbd213f740beea577cc4eae66accdffe15be1882"; };
    features = builtins.concatLists [
      [ "config" ]
    ];
    dependencies = {
      askama_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".askama_derive."0.11.0" { profileName = "__noProfile"; };
      askama_escape = rustPackages."registry+https://github.com/rust-lang/crates.io-index".askama_escape."0.10.2" { inherit profileName; };
      askama_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".askama_shared."0.12.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".askama_derive."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "askama_derive";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "84704cab5b7ae0fd3a9f78ee5eb7b27f3749df445f04623db6633459ae283267"; };
    features = builtins.concatLists [
      [ "config" ]
    ];
    dependencies = {
      askama_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".askama_shared."0.12.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".askama_escape."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "askama_escape";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a1bb320f97e6edf9f756bf015900038e43c7700e059688e5724a928c8f3b8d5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".askama_shared."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "askama_shared";
    version = "0.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dae03eebba55a2697a376e58b573a29fe36893157173ac8df312ad85f3c0e012"; };
    features = builtins.concatLists [
      [ "config" ]
      [ "serde" ]
      [ "toml" ]
    ];
    dependencies = {
      askama_escape = rustPackages."registry+https://github.com/rust-lang/crates.io-index".askama_escape."0.10.2" { inherit profileName; };
      nom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "atty";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitmaps."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bitmaps";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "031043d04099746d8db04daf1fa424b2bc8bd69d92b25962dcde24da39ab64a2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.12.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b"; };
    dependencies = {
      block_padding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-padding."0.1.5" { inherit profileName; };
      byte_tools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0bf7fe51849ea569fd452f37822f606a5cabb684dc918707a0193fd4664ff324"; };
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-padding."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "block-padding";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5"; };
    dependencies = {
      byte_tools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" { inherit profileName; };
    };
  });
  
  "unknown".bootstrap."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "bootstrap";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/bootstrap");
    dependencies = {
      cc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { inherit profileName; };
      cmake = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.44" { inherit profileName; };
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.14" { inherit profileName; };
      getopts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getopts."0.2.21" { inherit profileName; };
      ignore = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ignore."0.4.17" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.7.2" { inherit profileName; };
      opener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opener."0.5.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    devDependencies = {
      pretty_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."0.7.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bstr."0.2.13" = overridableMkRustCrate (profileName: rec {
    name = "bstr";
    version = "0.2.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31accafdb70df7871592c058eca3985b71104e15ac32f64706022c58867da931"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "lazy_static" ]
      [ "regex-automata" ]
      [ "std" ]
      [ "unicode" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      regex_automata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" { inherit profileName; };
    };
  });
  
  "unknown".build-manifest."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "build-manifest";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/build-manifest");
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.16" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.2" { inherit profileName; };
      rayon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.1" { inherit profileName; };
      tar = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tar."0.4.37" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
    };
  });
  
  "unknown".bump-stage0."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bump-stage0";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/bump-stage0");
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      curl = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curl."0.4.41" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "byte-tools";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytecount."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "bytecount";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72feb31ffc86498dacdbd0fcebb56138e7177a8cc5cea4516031d15ae85a742e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustfmt-nightly/generic-simd") "generic-simd")
      (lib.optional (rootFeatures' ? "rustfmt-nightly/generic-simd") "packed_simd")
    ];
    dependencies = {
      ${ if rootFeatures' ? "rustfmt-nightly/generic-simd" then "packed_simd" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".packed_simd_2."0.3.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b700ce4376041dcd0a327fd0097c41095743c4c8af8887265942faf1100bd040"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytesize."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "bytesize";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "81a18687293a1546b67c246452202bbbf143d239cb43494cc163da14979082da"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".camino."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "camino";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52d74260d9bf6944e2208aa46841b4b8f0d7ffc0849a06837b2f510337f86b2b"; };
    features = builtins.concatLists [
      [ "serde" ]
      [ "serde1" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "unknown".cargo."0.62.0" = overridableMkRustCrate (profileName: rec {
    name = "cargo";
    version = "0.62.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargo");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "cargo/deny-warnings") "deny-warnings")
      (lib.optional (rootFeatures' ? "cargo/openssl" || rootFeatures' ? "cargo/vendored-openssl") "openssl")
      (lib.optional (rootFeatures' ? "cargo/pretty-env-logger") "pretty-env-logger")
      (lib.optional (rootFeatures' ? "cargo/pretty-env-logger" || rootFeatures' ? "cargo/pretty_env_logger") "pretty_env_logger")
      (lib.optional (rootFeatures' ? "cargo/vendored-openssl") "vendored-openssl")
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      bytesize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytesize."1.0.1" { inherit profileName; };
      cargo_platform = rustPackages."unknown".cargo-platform."0.1.2" { inherit profileName; };
      cargo_util = rustPackages."unknown".cargo-util."0.1.2" { inherit profileName; };
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."3.1.1" { inherit profileName; };
      crates_io = rustPackages."unknown".crates-io."0.34.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.6" { inherit profileName; };
      curl = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curl."0.4.41" { inherit profileName; };
      curl_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curl-sys."0.4.51+curl-7.80.0" { inherit profileName; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.9.0" { inherit profileName; };
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.14" { inherit profileName; };
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.16" { inherit profileName; };
      ${ if hostPlatform.isWindows then "fwdansi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fwdansi."1.1.0" { inherit profileName; };
      git2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".git2."0.14.2" { inherit profileName; };
      git2_curl = rustPackages."registry+https://github.com/rust-lang/crates.io-index".git2-curl."0.15.0" { inherit profileName; };
      glob = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.2" { inherit profileName; };
      home = rustPackages."registry+https://github.com/rust-lang/crates.io-index".home."0.5.3" { inherit profileName; };
      humantime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."2.0.1" { inherit profileName; };
      ignore = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ignore."0.4.17" { inherit profileName; };
      im_rc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".im-rc."15.0.0" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      jobserver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      lazycell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      libgit2_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libgit2-sys."0.13.2+1.4.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      opener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opener."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "cargo/openssl" || rootFeatures' ? "cargo/vendored-openssl" then "openssl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl."0.10.35" { inherit profileName; };
      os_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".os_info."3.0.7" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "cargo/pretty-env-logger" || rootFeatures' ? "cargo/pretty_env_logger" then "pretty_env_logger" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pretty_env_logger."0.4.0" { inherit profileName; };
      rustc_workspace_hack = rustPackages."unknown".rustc-workspace-hack."1.0.0" { inherit profileName; };
      rustfix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustfix."0.6.0" { inherit profileName; };
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_ignored = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_ignored."0.1.2" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      shell_escape = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shell-escape."0.1.5" { inherit profileName; };
      strip_ansi_escapes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strip-ansi-escapes."0.1.0" { inherit profileName; };
      tar = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tar."0.4.37" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" { inherit profileName; };
      toml_edit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.13.4" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.8" { inherit profileName; };
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    devDependencies = {
      cargo_test_macro = buildRustPackages."unknown".cargo-test-macro."0.1.0" { profileName = "__noProfile"; };
      cargo_test_support = rustPackages."unknown".cargo-test-support."0.1.0" { inherit profileName; };
    };
    buildDependencies = {
      flate2 = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.16" { profileName = "__noProfile"; };
      tar = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tar."0.4.37" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".cargo-credential."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cargo-credential";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargo/crates/credential/cargo-credential");
  });
  
  "unknown".cargo-credential-1password."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cargo-credential-1password";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargo/crates/credential/cargo-credential-1password");
    dependencies = {
      cargo_credential = rustPackages."unknown".cargo-credential."0.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
    };
  });
  
  "unknown".cargo-credential-macos-keychain."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cargo-credential-macos-keychain";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargo/crates/credential/cargo-credential-macos-keychain");
    dependencies = {
      cargo_credential = rustPackages."unknown".cargo-credential."0.1.0" { inherit profileName; };
      security_framework = rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework."2.0.0" { inherit profileName; };
    };
  });
  
  "unknown".cargo-credential-wincred."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cargo-credential-wincred";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargo/crates/credential/cargo-credential-wincred");
    dependencies = {
      cargo_credential = rustPackages."unknown".cargo-credential."0.1.0" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".cargo-miri."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cargo-miri";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/miri/cargo-miri");
    dependencies = {
      directories = rustPackages."registry+https://github.com/rust-lang/crates.io-index".directories."3.0.2" { inherit profileName; };
      rustc_workspace_hack = rustPackages."unknown".rustc-workspace-hack."1.0.0" { inherit profileName; };
      rustc_version = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
    };
    buildDependencies = {
      vergen = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vergen."5.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".cargo-platform."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "cargo-platform";
    version = "0.1.2";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargo/crates/cargo-platform");
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cargo-platform."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "cargo-platform";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cbdb825da8a5df079a43676dbe042702f1707b1109f713a01420fbb4cc71fa27"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "unknown".cargo-test-macro."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cargo-test-macro";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargo/crates/cargo-test-macro");
  });
  
  "unknown".cargo-test-support."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cargo-test-support";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargo/crates/cargo-test-support");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "cargo-test-support/deny-warnings") "deny-warnings")
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      cargo_test_macro = buildRustPackages."unknown".cargo-test-macro."0.1.0" { profileName = "__noProfile"; };
      cargo_util = rustPackages."unknown".cargo-util."0.1.2" { inherit profileName; };
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.14" { inherit profileName; };
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.16" { inherit profileName; };
      git2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".git2."0.14.2" { inherit profileName; };
      glob = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      remove_dir_all = rustPackages."registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      tar = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tar."0.4.37" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" { inherit profileName; };
      toml_edit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.13.4" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
    };
  });
  
  "unknown".cargo-util."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "cargo-util";
    version = "0.1.2";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargo/crates/cargo-util");
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.0" { inherit profileName; };
      crypto_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-hash."0.3.4" { inherit profileName; };
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.14" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.2" { inherit profileName; };
      jobserver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "miow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" { inherit profileName; };
      same_file = rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; };
      shell_escape = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shell-escape."0.1.5" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "cargo_metadata";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c297bd3135f558552f99a0daa180876984ea2c4ffa7470314540dff8c654109a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      camino = rustPackages."registry+https://github.com/rust-lang/crates.io-index".camino."1.0.5" { inherit profileName; };
      cargo_platform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo-platform."0.1.2" { inherit profileName; };
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
    };
  });
  
  "unknown".cargotest2."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cargotest2";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargotest");
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e70cc2f62c6ce1868963827bd677764c62d07c3d9a3e1fb1177ee1a9ab199eb2"; };
    features = builtins.concatLists [
      [ "jobserver" ]
      [ "parallel" ]
    ];
    dependencies = {
      jobserver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822"; };
    features = builtins.concatLists [
      [ "compiler_builtins" ]
      [ "core" ]
      [ "rustc-dep-of-std" ]
    ];
    dependencies = {
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chalk-derive."0.80.0" = overridableMkRustCrate (profileName: rec {
    name = "chalk-derive";
    version = "0.80.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d0001adf0cf12361e08b65e1898ea138f8f77d8f5177cbf29b6b3b3532252bd6"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
      synstructure = rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chalk-engine."0.80.0" = overridableMkRustCrate (profileName: rec {
    name = "chalk-engine";
    version = "0.80.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c44ee96f2d67cb5193d1503f185db1abad9933a1c6e6b4169c176f90baecd393"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      chalk_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".chalk-derive."0.80.0" { profileName = "__noProfile"; };
      chalk_ir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chalk-ir."0.80.0" { inherit profileName; };
      chalk_solve = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chalk-solve."0.80.0" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chalk-ir."0.80.0" = overridableMkRustCrate (profileName: rec {
    name = "chalk-ir";
    version = "0.80.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "92d8a95548f23618fda86426e4304e563ec2bb7ba0216139f0748d63c107b5f1"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      chalk_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".chalk-derive."0.80.0" { profileName = "__noProfile"; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chalk-solve."0.80.0" = overridableMkRustCrate (profileName: rec {
    name = "chalk-solve";
    version = "0.80.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f37f492dacfafe2e21319b80827da2779932909bb392f0cc86b2bd5c07c1b4e1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "tracing-full" ]
      [ "tracing-subscriber" ]
      [ "tracing-tree" ]
    ];
    dependencies = {
      chalk_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".chalk-derive."0.80.0" { profileName = "__noProfile"; };
      chalk_ir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chalk-ir."0.80.0" { inherit profileName; };
      ena = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ena."0.14.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      petgraph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".petgraph."0.5.1" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.3" { inherit profileName; };
      tracing_tree = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-tree."0.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" = overridableMkRustCrate (profileName: rec {
    name = "chrono";
    version = "0.4.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73"; };
    features = builtins.concatLists [
      [ "clock" ]
      [ "default" ]
      [ "libc" ]
      [ "oldtime" ]
      [ "std" ]
      [ "time" ]
      [ "winapi" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.43" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.12" { inherit profileName; };
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.1.43" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" = overridableMkRustCrate (profileName: rec {
    name = "clap";
    version = "2.34.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c"; };
    features = builtins.concatLists [
      [ "ansi_term" ]
      [ "atty" ]
      [ "color" ]
      [ "default" ]
      [ "strsim" ]
      [ "suggestions" ]
      [ "vec_map" ]
      [ "yaml" ]
      [ "yaml-rust" ]
    ];
    dependencies = {
      ${ if !hostPlatform.isWindows then "ansi_term" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      strsim = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.8.0" { inherit profileName; };
      textwrap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".textwrap."0.11.0" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.8" { inherit profileName; };
      vec_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" { inherit profileName; };
      yaml_rust = rustPackages."registry+https://github.com/rust-lang/crates.io-index".yaml-rust."0.3.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap."3.1.1" = overridableMkRustCrate (profileName: rec {
    name = "clap";
    version = "3.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d76c22c9b9b215eeb8d016ad3a90417bd13cb24cf8142756e6472445876cab7"; };
    features = builtins.concatLists [
      [ "atty" ]
      [ "color" ]
      [ "default" ]
      [ "std" ]
      [ "strsim" ]
      [ "suggestions" ]
      [ "termcolor" ]
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      os_str_bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".os_str_bytes."6.0.0" { inherit profileName; };
      strsim = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" { inherit profileName; };
      textwrap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".textwrap."0.14.2" { inherit profileName; };
    };
  });
  
  "unknown".clippy."0.1.61" = overridableMkRustCrate (profileName: rec {
    name = "clippy";
    version = "0.1.61";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/clippy");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "clippy/deny-warnings") "deny-warnings")
      (lib.optional (rootFeatures' ? "clippy/integration") "integration")
      (lib.optional (rootFeatures' ? "clippy/internal") "internal")
      (lib.optional (rootFeatures' ? "clippy/integration" || rootFeatures' ? "clippy/tempfile") "tempfile")
    ];
    dependencies = {
      clippy_lints = rustPackages."unknown".clippy_lints."0.1.61" { inherit profileName; };
      rustc_tools_util = rustPackages."unknown".rustc_tools_util."0.2.0" { inherit profileName; };
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.3" { inherit profileName; };
      ${ if rootFeatures' ? "clippy/integration" || rootFeatures' ? "clippy/tempfile" then "tempfile" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
    };
    devDependencies = {
      cargo_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.14.0" { inherit profileName; };
      clippy_utils = rustPackages."unknown".clippy_utils."0.1.61" { inherit profileName; };
      compiletest_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiletest_rs."0.7.1" { inherit profileName; };
      derive_new = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive-new."0.5.8" { profileName = "__noProfile"; };
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.14" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" { inherit profileName; };
      if_chain = rustPackages."registry+https://github.com/rust-lang/crates.io-index".if_chain."1.0.0" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustc_semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-semver."1.1.0" { inherit profileName; };
      rustc_workspace_hack = rustPackages."unknown".rustc-workspace-hack."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
      tester = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tester."0.9.0" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.8.4" { inherit profileName; };
    };
    buildDependencies = {
      rustc_tools_util = buildRustPackages."unknown".rustc_tools_util."0.2.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".clippy_dev."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "clippy_dev";
    version = "0.0.1";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/clippy/clippy_dev");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "clippy_dev/deny-warnings") "deny-warnings")
    ];
    dependencies = {
      bytecount = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytecount."0.6.2" { inherit profileName; };
      cargo_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.14.0" { inherit profileName; };
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" { inherit profileName; };
      indoc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.3" { profileName = "__noProfile"; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      opener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opener."0.5.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      shell_escape = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shell-escape."0.1.5" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
    };
  });
  
  "unknown".clippy_lints."0.1.61" = overridableMkRustCrate (profileName: rec {
    name = "clippy_lints";
    version = "0.1.61";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/clippy/clippy_lints");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "clippy/deny-warnings" || rootFeatures' ? "clippy_lints/deny-warnings") "deny-warnings")
      (lib.optional (rootFeatures' ? "clippy/internal" || rootFeatures' ? "clippy_lints/internal") "internal")
      (lib.optional (rootFeatures' ? "clippy/internal" || rootFeatures' ? "clippy_lints/internal" || rootFeatures' ? "clippy_lints/serde_json") "serde_json")
    ];
    dependencies = {
      cargo_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.14.0" { inherit profileName; };
      clippy_utils = rustPackages."unknown".clippy_utils."0.1.61" { inherit profileName; };
      if_chain = rustPackages."registry+https://github.com/rust-lang/crates.io-index".if_chain."1.0.0" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      pulldown_cmark = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pulldown-cmark."0.9.1" { inherit profileName; };
      quine_mc_cluskey = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quine-mc_cluskey."0.2.4" { inherit profileName; };
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" { inherit profileName; };
      rustc_semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-semver."1.1.0" { inherit profileName; };
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      ${ if rootFeatures' ? "clippy/internal" || rootFeatures' ? "clippy_lints/internal" || rootFeatures' ? "clippy_lints/serde_json" then "serde_json" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
      unicode_normalization = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.13" { inherit profileName; };
      unicode_script = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-script."0.5.3" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
    };
  });
  
  "unknown".clippy_utils."0.1.61" = overridableMkRustCrate (profileName: rec {
    name = "clippy_utils";
    version = "0.1.61";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/clippy/clippy_utils");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "clippy/deny-warnings" || rootFeatures' ? "clippy_lints/deny-warnings" || rootFeatures' ? "clippy_utils/deny-warnings") "deny-warnings")
      (lib.optional (rootFeatures' ? "clippy/internal" || rootFeatures' ? "clippy_lints/internal" || rootFeatures' ? "clippy_utils/internal") "internal")
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.0" { inherit profileName; };
      if_chain = rustPackages."registry+https://github.com/rust-lang/crates.io-index".if_chain."1.0.0" { inherit profileName; };
      rustc_semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-semver."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.44" = overridableMkRustCrate (profileName: rec {
    name = "cmake";
    version = "0.1.44";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e56268c17a6248366d66d4a47a3381369d068cce8409bb1716ed77ea32163bb"; };
    dependencies = {
      cc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".colored."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "colored";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b3616f750b84d8f0de8a58bda93e08e2a81ad3f523089b05f1dffecab48c6cbd"; };
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".combine."4.6.3" = overridableMkRustCrate (profileName: rec {
    name = "combine";
    version = "4.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50b727aacc797f9fc28e355d21f34709ac4fc9adecfe470ad07b8f4464f53062"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "bytes" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.0.1" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".commoncrypto."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "commoncrypto";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007"; };
    dependencies = {
      commoncrypto_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".commoncrypto-sys."0.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".commoncrypto-sys."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "commoncrypto-sys";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" = overridableMkRustCrate (profileName: rec {
    name = "compiler_builtins";
    version = "0.1.70";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "80873f979f0a344a4ade87c2f70d9ccf5720b83b10c97ec7cd745895d021e85a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "alloc/compiler-builtins-c" || rootFeatures' ? "std/compiler-builtins-c" || rootFeatures' ? "test/compiler-builtins-c") "c")
      (lib.optional (rootFeatures' ? "alloc/compiler-builtins-c" || rootFeatures' ? "std/compiler-builtins-c" || rootFeatures' ? "test/compiler-builtins-c") "cc")
      [ "compiler-builtins" ]
      [ "core" ]
      [ "default" ]
      (lib.optional (rootFeatures' ? "alloc/compiler-builtins-mangled-names" || rootFeatures' ? "std/compiler-builtins-mangled-names" || rootFeatures' ? "test/compiler-builtins-mangled-names") "mangled-names")
      (lib.optional (rootFeatures' ? "alloc/compiler-builtins-mem" || rootFeatures' ? "std/compiler-builtins-mem" || rootFeatures' ? "test/compiler-builtins-mem") "mem")
      (lib.optional (rootFeatures' ? "alloc/compiler-builtins-no-asm" || rootFeatures' ? "std/compiler-builtins-no-asm" || rootFeatures' ? "test/compiler-builtins-no-asm") "no-asm")
      [ "rustc-dep-of-std" ]
    ];
    dependencies = {
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "alloc/compiler-builtins-c" || rootFeatures' ? "std/compiler-builtins-c" || rootFeatures' ? "test/compiler-builtins-c" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".compiletest."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "compiletest";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/compiletest");
    dependencies = {
      colored = rustPackages."registry+https://github.com/rust-lang/crates.io-index".colored."2.0.0" { inherit profileName; };
      diff = rustPackages."registry+https://github.com/rust-lang/crates.io-index".diff."0.1.12" { inherit profileName; };
      getopts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getopts."0.2.21" { inherit profileName; };
      glob = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.isWindows then "miow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustfix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustfix."0.6.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.3" { inherit profileName; };
      unified_diff = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unified-diff."0.2.1" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".compiletest_rs."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "compiletest_rs";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "29843cb8d351febf86557681d049d1e1652b81a086a190fa1173c07fd17fbf83"; };
    features = builtins.concatLists [
      [ "tempfile" ]
      [ "tmp" ]
    ];
    dependencies = {
      diff = rustPackages."registry+https://github.com/rust-lang/crates.io-index".diff."0.1.12" { inherit profileName; };
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.14" { inherit profileName; };
      getopts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getopts."0.2.21" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "miow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustfix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustfix."0.5.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.125" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
      tester = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tester."0.9.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".core."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "core";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/core");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "core/debug_refcell") "debug_refcell")
      (lib.optional (rootFeatures' ? "core/panic_immediate_abort" || rootFeatures' ? "std/panic_immediate_abort" || rootFeatures' ? "test/panic_immediate_abort") "panic_immediate_abort")
    ];
    devDependencies = {
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3b5ed8e7e76c45974e15e41bfa8d5b0483cd90191639e01d8f5f1e606299d3fb"; };
    features = builtins.concatLists [
      [ "mac_os_10_7_support" ]
    ];
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a21fa21941700a3cd8fcb4091f361a6a712fac632f85d9f487cc892045d55c6"; };
    features = builtins.concatLists [
      [ "mac_os_10_7_support" ]
    ];
  });
  
  "unknown".coverage_test_macros."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "coverage_test_macros";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_mir_transform/src/coverage/test_macros");
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "cpufeatures";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "95059428f66df56b63431fdb4e1947ed2190586af5c5a8a8b71122bdf5a7f469"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-apple-darwin" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "unknown".crates-io."0.34.0" = overridableMkRustCrate (profileName: rec {
    name = "crates-io";
    version = "0.34.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/cargo/crates/crates-io");
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      curl = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curl."0.4.41" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e54ea8bc3fb1ee042f5aace6e3c6e025d3874866da222930f70ce62aceba0bfa"; };
    features = builtins.concatLists [
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-deque";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6455c0ca19f0d2fbf751b908d5c55c1f5cbc65e03c4225427254b46890bdde1e"; };
    features = builtins.concatLists [
      [ "crossbeam-epoch" ]
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_epoch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.6" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.6" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-epoch";
    version = "0.9.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97242a70df9b89a65d0b6df3c4bf5b9ce03c5b7309019777fbde37e7537f8762"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "lazy_static" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.6" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      memoffset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; };
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cfcae03edb34f947e64acdb1c33ec169824e20657e9ecb61cef6c8c74dcb8120"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "lazy_static" ]
      [ "nightly" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "crypto-common";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4600d695eb3f6ce1cd44e6e291adceb2cc3ab12f20a33777ecd0bf6eba34e06"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-hash."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "crypto-hash";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a77162240fd97248d19a564a565eb563a3f592b386e4136fb300909e67dddca"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "commoncrypto" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".commoncrypto."0.2.0" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.3.2" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "openssl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl."0.10.35" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cstr."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "cstr";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c11a39d776a3b35896711da8a04dc1835169dcd36f710878187637314e47941b"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ctor."0.1.15" = overridableMkRustCrate (profileName: rec {
    name = "ctor";
    version = "0.1.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39858aa5bac06462d4dd4b9164848eb81ffc4aa5c479746393598fd193afa227"; };
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curl."0.4.41" = overridableMkRustCrate (profileName: rec {
    name = "curl";
    version = "0.4.41";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1bc6d233563261f8db6ffb83bbaad5a73837a6e6b28868e926337ebbdece0be3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "http2" ]
      [ "openssl-probe" ]
      [ "openssl-sys" ]
      [ "ssl" ]
    ];
    dependencies = {
      curl_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curl-sys."0.4.51+curl-7.80.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then "openssl_probe" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.2" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then "openssl_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.65" { inherit profileName; };
      ${ if hostPlatform.parsed.abi.name == "msvc" then "schannel" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.19" { inherit profileName; };
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.1" { inherit profileName; };
      ${ if hostPlatform.parsed.abi.name == "msvc" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curl-sys."0.4.51+curl-7.80.0" = overridableMkRustCrate (profileName: rec {
    name = "curl-sys";
    version = "0.4.51+curl-7.80.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d130987e6a6a34fe0889e1083022fa48cd90e6709a84be3fb8dd95801de5af20"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "http2" ]
      [ "libnghttp2-sys" ]
      [ "openssl-sys" ]
      [ "ssl" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      libnghttp2_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libnghttp2-sys."0.1.4+1.41.0" { inherit profileName; };
      libz_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.3" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then "openssl_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.65" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.18" { profileName = "__noProfile"; };
      ${ if hostPlatform.parsed.abi.name == "msvc" then "vcpkg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.10" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".datafrog."2.0.1" = overridableMkRustCrate (profileName: rec {
    name = "datafrog";
    version = "2.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0afaad2b26fa326569eb264b1363e8ae3357618c43982b3f285f0774ce76b69"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive-new."0.5.8" = overridableMkRustCrate (profileName: rec {
    name = "derive-new";
    version = "0.5.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "71f31892cd5c62e414316f2963c5689242c43d8e7bbcaaeca97e5e28c95d91d9"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.9" = overridableMkRustCrate (profileName: rec {
    name = "derive_more";
    version = "0.99.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "298998b1cf6b5b2c8a7b023dfd45821825ce3ba8a8af55c921a0e734e4653f76"; };
    features = builtins.concatLists [
      [ "add" ]
      [ "add_assign" ]
      [ "as_mut" ]
      [ "as_ref" ]
      [ "constructor" ]
      [ "default" ]
      [ "deref" ]
      [ "deref_mut" ]
      [ "display" ]
      [ "error" ]
      [ "from" ]
      [ "from_str" ]
      [ "index" ]
      [ "index_mut" ]
      [ "into" ]
      [ "into_iterator" ]
      [ "iterator" ]
      [ "mul" ]
      [ "mul_assign" ]
      [ "not" ]
      [ "sum" ]
      [ "try_into" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".diff."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "diff";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e25ea47919b1560c4e3b7fe0aaab9becf5b84a10325ddf7db0f0ba5e1026499"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".difference."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "difference";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5"; };
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8cb780dce4f9a8f5c087362b3a4595936b2019e7c8b30f2c3e9a7e94e6ae9837"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "block-buffer" ]
      [ "core-api" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_buffer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.2" { inherit profileName; };
      crypto_common = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".directories."3.0.2" = overridableMkRustCrate (profileName: rec {
    name = "directories";
    version = "3.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e69600ff1703123957937708eb27f7a564e48885c537782722ed0ba3189ce1d7"; };
    dependencies = {
      dirs_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs."2.0.2" = overridableMkRustCrate (profileName: rec {
    name = "dirs";
    version = "2.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      dirs_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-next."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "dirs-next";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      dirs_sys_next = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03d86534ed367a67548dc68113a0f5db55432fdfbb6e6f9d77704397d95d5780"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys-next";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dlmalloc."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "dlmalloc";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a6fe28e0bf9357092740362502f5cc7955d8dc125ebda71dec72336c2e15c62e"; };
    features = builtins.concatLists [
      [ "compiler_builtins" ]
      [ "core" ]
      [ "rustc-dep-of-std" ]
    ];
    dependencies = {
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.cpu.name == "wasm32") then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".either."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "either";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cd56b59865bce947ac5958779cfa508f6c3b9497cc762b7e24a12d11ccde2c4f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".elasticlunr-rs."2.3.9" = overridableMkRustCrate (profileName: rec {
    name = "elasticlunr-rs";
    version = "2.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "35622eb004c8f0c5e7e2032815f3314a93df0db30a1ce5c94e62c1ecc81e22b9"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.125" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      strum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strum."0.18.0" { inherit profileName; };
      strum_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.18.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ena."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "ena";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d7402b94a93c24e742487327a7cd839dc9d36fec9de9fb25b09f2dae459f36c3"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enum-iterator."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "enum-iterator";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c79a6321a1197d7730510c7e3f6cb80432dfefecb32426de8cea0aa19b4bb8d7"; };
    dependencies = {
      enum_iterator_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-iterator-derive."0.6.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enum-iterator-derive."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "enum-iterator-derive";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e94aa31f7c0dc764f57896dc615ddd76fc13b0d5dca7eb6cc5e018a5a09ec06"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44533bbbb3bb3c1fa17d9f2e4e38bbbaf8396ba82193c4cb1b6445d711445d36"; };
    features = builtins.concatLists [
      [ "atty" ]
      [ "default" ]
      [ "humantime" ]
      [ "regex" ]
      [ "termcolor" ]
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      humantime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."1.3.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a19187fea3ac7e84da7dacf48de0c45d63c6a76f9490dae389aead16c243fce3"; };
    features = builtins.concatLists [
      [ "atty" ]
      [ "default" ]
      [ "humantime" ]
      [ "regex" ]
      [ "termcolor" ]
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      humantime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."2.0.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b2cf0344971ee6c64c31be0d530793fba457d322dfec2810c453d0ef228f9c3"; };
    features = builtins.concatLists [
      [ "atty" ]
      [ "default" ]
      [ "humantime" ]
      [ "regex" ]
      [ "termcolor" ]
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      humantime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."2.0.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" { inherit profileName; };
    };
  });
  
  "unknown".error_index_generator."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "error_index_generator";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/error_index_generator");
    dependencies = {
      rustdoc = rustPackages."unknown".rustdoc."0.0.0" { inherit profileName; };
    };
    buildDependencies = {
      walkdir = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".expand-yaml-anchors."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "expand-yaml-anchors";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/expand-yaml-anchors");
    dependencies = {
      yaml_merge_keys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".yaml-merge-keys."0.4.1" { inherit profileName; };
      yaml_rust = rustPackages."registry+https://github.com/rust-lang/crates.io-index".yaml-rust."0.4.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".expect-test."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "expect-test";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ceb96f3eaa0d4e8769c52dacfd4eb60183b817ed2f176171b3c691d5022b0f2e"; };
    dependencies = {
      difference = rustPackages."registry+https://github.com/rust-lang/crates.io-index".difference."2.0.0" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.7.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fake-simd."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "fake-simd";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fallible-iterator";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "filetime";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d34cfa13a63ae058bfa601fe9e313bbdb3746427c1459185464ce0fcf62e1e8"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.16" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68c90b0fc46cf89d227cc78b40e494ff81287a92dd07631e5af0d06fe3cf885e"; };
    features = builtins.concatLists [
      [ "any_zlib" ]
      [ "default" ]
      [ "libz-sys" ]
      [ "miniz_oxide" ]
      [ "rust_backend" ]
      [ "zlib" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.2.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      libz_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.3" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"; };
    dependencies = {
      foreign_types_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "form_urlencoded";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5fc25a87fa4fd2094bffb06925852034d90a17f0d1e05197d4956d3555752191"; };
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fortanix-sgx-abi."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "fortanix-sgx-abi";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c56c422ef86062869b2d57ae87270608dc5929969dd130a6e248979cf4fb6ca6"; };
    features = builtins.concatLists [
      [ "compiler_builtins" ]
      [ "core" ]
      [ "rustc-dep-of-std" ]
    ];
    dependencies = {
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fs-err."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "fs-err";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bcd1163ae48bda72a20ae26d66a04d3094135cadab911cff418ae5e33f253431"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fs_extra."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "fs_extra";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fst."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "fst";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d79238883cf0307100b90aba4a755d8051a3182305dfe7f649a1e9dc0517006f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futf."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "futf";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c9c1ce3fa9336301af935ab852c437817d14cd33690446569392e65170aac3b"; };
    dependencies = {
      mac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mac."0.1.1" { inherit profileName; };
      debug_unreachable = rustPackages."registry+https://github.com/rust-lang/crates.io-index".new_debug_unreachable."1.0.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures."0.1.31" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.1.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a471a38ef8ed83cd6e40aa59c1ffe17db6855c18e3604d9c4ed8c08ebc28678"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_std" ]
      [ "with-deprecated" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "28560757fe2bb34e79f907794bb6b22ae8b0e5c669b638a1132f2592b19035b4"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "compat" ]
      [ "default" ]
      [ "executor" ]
      [ "futures-executor" ]
      [ "std" ]
      [ "thread-pool" ]
    ];
    dependencies = {
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.19" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.19" { inherit profileName; };
      futures_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.19" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.19" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.19" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.19" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.19" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "futures-channel";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba3dda0b6588335f360afc675d0564c17a77a2bda81ca178a4b6081bd86c7f0b"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "futures-sink" ]
      [ "sink" ]
      [ "std" ]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.19" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.19" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d0c8ff0461b82559810cdccfde3215c3f373807f5e5232b71479bff7bb2583d7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "futures-executor";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "29d6d2ff5bb10fb95c85b8ce46538a2e5f5e7fdc755623a7d4529ab8a4ed9d2a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "num_cpus" ]
      [ "std" ]
      [ "thread-pool" ]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.19" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.19" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.19" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1f9d34af5a1aac6fb380f735fe510746c38067c5bf16c7fd250280503c971b2"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "futures-macro";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6dbd947adfffb0efc70599b3ddcf7b5597bb5fa9e245eb99f62b3a5f7bb8bd3c"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "futures-sink";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3055baccb68d74ff6480350f8d6eb8fcfa3aa11bdc1a1ae3afdd0514617d508"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "futures-task";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ee7c6485c30167ce4dfb83ac568a849fe53274c831081476ee13e0dce1aad72"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "futures-util";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b5cf40b47a271f77a8b1bec03ca09044d99d2372c0de244e66430761127164"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "async-await-macro" ]
      [ "channel" ]
      [ "compat" ]
      [ "futures-channel" ]
      [ "futures-io" ]
      [ "futures-macro" ]
      [ "futures-sink" ]
      [ "futures_01" ]
      [ "io" ]
      [ "memchr" ]
      [ "sink" ]
      [ "slab" ]
      [ "std" ]
    ];
    dependencies = {
      futures_01 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.1.31" { inherit profileName; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.19" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.19" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.19" { inherit profileName; };
      futures_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.19" { profileName = "__noProfile"; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.19" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.19" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      pin_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fwdansi."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "fwdansi";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08c1f5787fe85505d1f7777268db5103d80a7a374d2316a7ce262e57baf8f208"; };
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffdf9f34f1447443d37393cc6c2b8313aebddcd96906caf34e54c68d8e57d7bd"; };
    dependencies = {
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.12.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.4" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.14.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817"; };
    features = builtins.concatLists [
      [ "more_lengths" ]
    ];
    dependencies = {
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.12.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getopts."0.2.21" = overridableMkRustCrate (profileName: rec {
    name = "getopts";
    version = "0.2.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14dbbfd5c71d70241ecf9e6f13737f7b5ce823821063188d7e46c41d371eebd5"; };
    features = builtins.concatLists [
      [ "core" ]
      [ "rustc-dep-of-std" ]
      [ "std" ]
    ];
    dependencies = {
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
      std = rustPackages."unknown".rustc-std-workspace-std."1.99.0" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.14" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.1.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ee8025cf36f917e6a52cce185b7c7177689b838b7ec138364e50cc2277a56cf4"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getset."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "getset";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "24b328c01a4d71d2d8173daa93562a73ab0fe85616876f02500f53d82948c504"; };
    dependencies = {
      proc_macro_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0a01e0497841a3b2db4f8afa483cce65f7e96a3498bd6c541734792aeac8fe7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "alloc")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "compiler_builtins")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "core")
      (lib.optional (rootFeatures' ? "std/addr2line" || rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "read")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "rustc-dep-of-std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "compiler_builtins" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "alloc" else null } = rustPackages."unknown".rustc-std-workspace-alloc."1.99.0" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "core" else null } = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.26.1" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.26.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "78cc372d058dcf6d5ecd98510e7fbc9e5aec4d21de70f65fea8fecebcd881bd4"; };
    features = builtins.concatLists [
      [ "fallible-iterator" ]
      [ "indexmap" ]
      [ "read" ]
      [ "read-core" ]
      [ "stable_deref_trait" ]
      [ "std" ]
      [ "write" ]
    ];
    dependencies = {
      fallible_iterator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      stable_deref_trait = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".git2."0.14.2" = overridableMkRustCrate (profileName: rec {
    name = "git2";
    version = "0.14.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3826a6e0e2215d7a41c2bfc7c9244123969273f3476b939a226aac0ab56e9e3c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "https" ]
      [ "openssl-probe" ]
      [ "openssl-sys" ]
      [ "ssh" ]
      [ "ssh_key_from_memory" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      libgit2_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libgit2-sys."0.13.2+1.4.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then "openssl_probe" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.2" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then "openssl_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.65" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".git2-curl."0.15.0" = overridableMkRustCrate (profileName: rec {
    name = "git2-curl";
    version = "0.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ee51709364c341fbb6fe2a385a290fb9196753bdde2fc45447d27cd31b11b13"; };
    dependencies = {
      curl = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curl."0.4.41" { inherit profileName; };
      git2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".git2."0.14.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "glob";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".globset."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "globset";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ad1da430bd7281dde2576f44c84cc3f0f7b475e7202cd503042dff01a8c8120"; };
    dependencies = {
      aho_corasick = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.18" { inherit profileName; };
      bstr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bstr."0.2.13" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gsgdt."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "gsgdt";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0d876ce7262df96262a2a19531da6ff9a86048224d49580a585fc5c04617825"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".handlebars."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "handlebars";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72a0ffab8c36d0436114310c7e10b59b3307e650ddfabf6d006028e29a70c6e6"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      pest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" { inherit profileName; };
      pest_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pest_derive."2.1.0" { profileName = "__noProfile"; };
      quick_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-error."2.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "default" ]
      [ "inline-more" ]
      [ "raw" ]
    ];
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c21d40587b92fa6a6c6e3c1bdbf87d75511db5672f9c93175574b3a00df1758"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "compiler_builtins" ]
      [ "core" ]
      [ "nightly" ]
      [ "rustc-dep-of-std" ]
      [ "rustc-internal-api" ]
    ];
    dependencies = {
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      alloc = rustPackages."unknown".rustc-std-workspace-alloc."1.99.0" { inherit profileName; };
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".heck."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "heck";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205"; };
    dependencies = {
      unicode_segmentation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ab7905ea95c6d9af62940f9d7dd9596d54c334ae2c15300c482051292d5637f"; };
    features = builtins.concatLists [
      [ "compiler_builtins" ]
      [ "core" ]
      [ "default" ]
      [ "rustc-dep-of-std" ]
    ];
    dependencies = {
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "hex";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "hex";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "644f9158b2f133fd50f5fb3242878846d9eb792e445c893805ff0e3824006e35"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".home."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "home";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2456aef2e6b6a9784192ae780c0f15bc57df0e918585282325e8c8ac27737654"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".html-checker."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "html-checker";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/html-checker");
    dependencies = {
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".html5ever."0.25.1" = overridableMkRustCrate (profileName: rec {
    name = "html5ever";
    version = "0.25.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aafcf38a1a36118242d29b92e1b08ef84e67e4a5ed06e0a80be20e6a32bfed6b"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      mac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mac."0.1.1" { inherit profileName; };
      markup5ever = rustPackages."registry+https://github.com/rust-lang/crates.io-index".markup5ever."0.10.1" { inherit profileName; };
    };
    buildDependencies = {
      proc_macro2 = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { profileName = "__noProfile"; };
      quote = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { profileName = "__noProfile"; };
      syn = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".humantime."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "humantime";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f"; };
    dependencies = {
      quick_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".humantime."2.0.1" = overridableMkRustCrate (profileName: rec {
    name = "humantime";
    version = "2.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c1ad908cc71012b7bea4d0c53ba96a8cba9962f048fa68d143376143d863b7a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e"; };
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
      unicode_bidi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.4" { inherit profileName; };
      unicode_normalization = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.13" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9"; };
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
      unicode_bidi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.4" { inherit profileName; };
      unicode_normalization = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.13" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".if_chain."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "if_chain";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3360c7b59e5ffa2653671fb74b4741a5d343c03f331c0a4aeda42b5c2b0ec7d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ignore."0.4.17" = overridableMkRustCrate (profileName: rec {
    name = "ignore";
    version = "0.4.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b287fb45c60bb826a0dc68ff08742b9d88a2fea13d6e0c286b3172065aaf878c"; };
    dependencies = {
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.6" { inherit profileName; };
      globset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".globset."0.4.5" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      same_file = rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".im-rc."15.0.0" = overridableMkRustCrate (profileName: rec {
    name = "im-rc";
    version = "15.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3ca8957e71f04a205cb162508f9326aea04676c8dfd0711220190d6b83664f3f"; };
    dependencies = {
      bitmaps = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitmaps."2.1.0" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
      rand_xoshiro = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_xoshiro."0.4.0" { inherit profileName; };
      sized_chunks = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sized-chunks."0.6.4" { inherit profileName; };
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.12.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "282a6247722caba404c065016bbfa522806e51714c34f5dfc3e4a3a46fcb4223"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler") "rustc-rayon")
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" then "rustc_rayon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-rayon."0.3.2" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indoc."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "indoc";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5a75aeaaef0ce18b58056d306c27b07436fbb34b8816c53094b76dd81803136"; };
    dependencies = {
      unindent = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unindent."0.1.7" { inherit profileName; };
    };
  });
  
  "unknown".installer."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "installer";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rust-installer");
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" { inherit profileName; };
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.16" { inherit profileName; };
      ${ if hostPlatform.isWindows then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
      rayon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.1" { inherit profileName; };
      remove_dir_all = rustPackages."registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" { inherit profileName; };
      tar = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tar."0.4.37" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      xz2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xz2."0.1.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "69ddb889f9d0d08a67338271fa9b62996bc788c7796a5c18cf057420aaed5eaf"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_alloc" ]
      [ "use_std" ]
    ];
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc6f3ad7b9d11a0c00842ff8de1b60ee58661048eb8049ed33c73594f359d7e6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" = overridableMkRustCrate (profileName: rec {
    name = "jobserver";
    version = "0.1.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af25a77299a7f711a01975c35a6a424eb6862092cc2d6c72c4ed6cbc56dfc1fa"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".json."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "json";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "078e285eafdfb6c4b434e0d31e8cfcb5115b651496faca5749b88fafd4f23bfd"; };
  });
  
  "unknown".jsondocck."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "jsondocck";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/jsondocck");
    dependencies = {
      fs_err = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fs-err."2.5.0" { inherit profileName; };
      getopts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getopts."0.2.21" { inherit profileName; };
      jsonpath_lib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonpath_lib."0.2.6" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.7.2" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      shlex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonpath_lib."0.2.6" = overridableMkRustCrate (profileName: rec {
    name = "jsonpath_lib";
    version = "0.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61352ec23883402b7d30b3313c16cbabefb8907361c4eb669d990cbb87ceee5a"; };
    dependencies = {
      array_tool = rustPackages."registry+https://github.com/rust-lang/crates.io-index".array_tool."1.0.3" { inherit profileName; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.7.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-client-transports."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-client-transports";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2b99d4207e2a04fb4581746903c2bb7eb376f88de9c699d0f3e10feeac0cd3a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-rustc/ipc") "ipc")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-rustc/ipc") "jsonrpc-server-utils")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-rustc/ipc") "parity-tokio-ipc")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-rustc/ipc") "tokio")
    ];
    dependencies = {
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.9" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      jsonrpc_pubsub = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-pubsub."18.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-rustc/ipc" then "jsonrpc_server_utils" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-server-utils."18.0.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-rustc/ipc" then "parity_tokio_ipc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-tokio-ipc."0.9.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-rustc/ipc" then "tokio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.8.4" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."1.7.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-core";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14f7f76aef2d054868398427f6c54943cf3d1caa9a7ec7d0c38d69df97a965eb"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "futures" ]
      [ "futures-executor" ]
    ];
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" { inherit profileName; };
      futures_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.19" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.19" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.125" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core-client."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-core-client";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b51da17abecbdab3e3d4f26b01c5ec075e88d3abe3ab3b05dc9aa69392764ec0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-rustc/ipc") "ipc")
    ];
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" { inherit profileName; };
      jsonrpc_client_transports = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-client-transports."18.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-derive."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-derive";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b939a78fa820cdfcb7ee7484466746a7377760970f6f9c6fe19f9edcc8a38d2"; };
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-ipc-server."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-ipc-server";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "382bb0206323ca7cda3dcd7e245cea86d37d02457a02a975e3378fb149a48845"; };
    dependencies = {
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" then "futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" then "jsonrpc_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" then "jsonrpc_server_utils" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-server-utils."18.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" then "parity_tokio_ipc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-tokio-ipc."0.9.0" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" then "tower_service" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-pubsub."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-pubsub";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "240f87695e6c6f62fb37f05c02c04953cf68d6408b8c1c89de85c7a0125b1011"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-server-utils."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-server-utils";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa4fdea130485b572c39a460d50888beb00afb3e35de23ccd7fad8ff19f0e0d4"; };
    dependencies = {
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "bytes" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.0.1" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "globset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".globset."0.4.5" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "jsonrpc_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "tokio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.8.4" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "tokio_stream" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.7" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "tokio_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.6.7" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "unicase" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kstring."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "kstring";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b310ccceade8121d7d77fee406160e457c2f4e7c7982d589da3499bc7ea4526"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "max_inline" ]
      [ "serde" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "lazycell";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.116";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "565dbd88872dbe4cc8a46e527f26483c1d1f7afa6b884a3bd6cd893d4f98da74"; };
    features = builtins.concatLists [
      [ "align" ]
      [ "default" ]
      [ "rustc-dep-of-std" ]
      [ "rustc-std-workspace-core" ]
      [ "std" ]
    ];
    dependencies = {
      rustc_std_workspace_core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libgit2-sys."0.13.2+1.4.2" = overridableMkRustCrate (profileName: rec {
    name = "libgit2-sys";
    version = "0.13.2+1.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a42de9a51a5c12e00fc0e4ca6bc2ea43582fc6418488e8f615e905d886f258b"; };
    features = builtins.concatLists [
      [ "https" ]
      [ "libssh2-sys" ]
      [ "openssl-sys" ]
      [ "ssh" ]
      [ "ssh_key_from_memory" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      libssh2_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libssh2-sys."0.2.23" { inherit profileName; };
      libz_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.3" { inherit profileName; };
      ${ if hostPlatform.isUnix then "openssl_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.65" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.18" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c0cf036d15402bea3c5d4de17b3fce76b3e4a56ebc1f577be0e7a72f7c607cf0"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libm."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "libm";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fc7aa29613bd6a620df431842069224d8bc9011086b1db4c0e0cd47fa03ec9a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustfmt-nightly/generic-simd") "default")
      (lib.optional (rootFeatures' ? "rustfmt-nightly/generic-simd") "stable")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libnghttp2-sys."0.1.4+1.41.0" = overridableMkRustCrate (profileName: rec {
    name = "libnghttp2-sys";
    version = "0.1.4+1.41.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03624ec6df166e79e139a2310ca213283d6b3c30810c54844f307086d4488df1"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libssh2-sys."0.2.23" = overridableMkRustCrate (profileName: rec {
    name = "libssh2-sys";
    version = "0.2.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b094a36eb4b8b8c8a7b4b8ae43b2944502be3e59cd87687595cf6b0a71b3f4ca"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      libz_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.3" { inherit profileName; };
      ${ if hostPlatform.isUnix then "openssl_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.65" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.18" { profileName = "__noProfile"; };
      ${ if hostPlatform.parsed.abi.name == "msvc" then "vcpkg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.10" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "libz-sys";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "de5435b8549c16d423ed0c03dbaafe57cf6c3344744f1242520d59c9d8ecec66"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "libc" ]
      [ "stock-zlib" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.18" { profileName = "__noProfile"; };
      ${ if hostPlatform.parsed.abi.name == "msvc" then "vcpkg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.10" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".linkchecker."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "linkchecker";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/linkchecker");
    dependencies = {
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.7.2" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "linked-hash-map";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fb9b38af92608140b86b693604b9ffcc5824240a484d1ecd4795bacb2fe88f3"; };
  });
  
  "unknown".lint-docs."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "lint-docs";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/lint-docs");
    dependencies = {
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
    };
  });
  
  "unknown".lld-wrapper."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "lld-wrapper";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/lld-wrapper");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "lld-wrapper/ld") "ld")
      (lib.optional (rootFeatures' ? "lld-wrapper/ld64") "ld64")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712a4d093c9976e24e7dbca41db895dabcbac38eb5f4045393d17a95bdfb1109"; };
    dependencies = {
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lsp-codec."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "lsp-codec";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa939d0b62476a5a19fb7fcb423a5c6ce8c7e09b851d37531e2fe3e0e6d9d257"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.0.1" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      tokio_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.6.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lsp-types."0.60.0" = overridableMkRustCrate (profileName: rec {
    name = "lsp-types";
    version = "0.60.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe3edefcd66dde1f7f1df706f46520a3c93adc5ca4bc5747da6621195e894efd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proposed" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      serde_repr = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_repr."0.1.6" { profileName = "__noProfile"; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lzma-sys."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "lzma-sys";
    version = "0.1.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f24f76ec44a8ac23a31915d6e326bca17ce88da03096f1ff194925dc714dac99"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.18" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mac."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "mac";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".macro-utils."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "macro-utils";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e72f7deb758fea9ea7d290aebfa788763d0bffae12caa6406a25baaf8fa68a8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".maplit."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "maplit";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".markup5ever."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "markup5ever";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a24f40fb03852d1cdd84330cddcaf98e9ec08a7b7768e952fad3b4cf048ec8fd"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      phf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf."0.8.0" { inherit profileName; };
      string_cache = rustPackages."registry+https://github.com/rust-lang/crates.io-index".string_cache."0.8.0" { inherit profileName; };
      tendril = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tendril."0.4.1" { inherit profileName; };
    };
    buildDependencies = {
      phf_codegen = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_codegen."0.8.0" { profileName = "__noProfile"; };
      string_cache_codegen = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".string_cache_codegen."0.5.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".markup5ever_rcdom."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "markup5ever_rcdom";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f015da43bcd8d4f144559a3423f4591d69b8ce0652c905374da7205df336ae2b"; };
    dependencies = {
      html5ever = rustPackages."registry+https://github.com/rust-lang/crates.io-index".html5ever."0.25.1" { inherit profileName; };
      markup5ever = rustPackages."registry+https://github.com/rust-lang/crates.io-index".markup5ever."0.10.1" { inherit profileName; };
      tendril = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tendril."0.4.1" { inherit profileName; };
      xml5ever = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml5ever."0.16.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matchers."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "matchers";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558"; };
    dependencies = {
      regex_automata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" = overridableMkRustCrate (profileName: rec {
    name = "matches";
    version = "0.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "md-5";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6a38fc55c8bbc10058782919516f88826e70320db6d206aebc49611d24216ae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mdbook."0.4.15" = overridableMkRustCrate (profileName: rec {
    name = "mdbook";
    version = "0.4.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "241f10687eb3b4e0634b3b4e423f97c5f1efbd69dc9522e24a8b94583eeec3c6"; };
    features = builtins.concatLists [
      [ "ammonia" ]
      [ "elasticlunr-rs" ]
      [ "search" ]
    ];
    dependencies = {
      ammonia = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ammonia."3.1.3" { inherit profileName; };
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" { inherit profileName; };
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" { inherit profileName; };
      elasticlunr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".elasticlunr-rs."2.3.9" { inherit profileName; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.7.1" { inherit profileName; };
      handlebars = rustPackages."registry+https://github.com/rust-lang/crates.io-index".handlebars."4.1.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      opener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opener."0.5.0" { inherit profileName; };
      pulldown_cmark = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pulldown-cmark."0.9.1" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.125" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      shlex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.0.0" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
      topological_sort = rustPackages."registry+https://github.com/rust-lang/crates.io-index".topological-sort."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".measureme."9.1.2" = overridableMkRustCrate (profileName: rec {
    name = "measureme";
    version = "9.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "78f7a41bc6f856a2cf0e95094ad5121f82500e2d9a0f3c0171d98f6566d8117d"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.kernel.name == "linux" then "memmap2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.2.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.kernel.name == "linux" then "perf_event_open_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".perf-event-open-sys."1.0.1" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".measureme."10.0.0" = overridableMkRustCrate (profileName: rec {
    name = "measureme";
    version = "10.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd460fad6e55ca82fa0cd9dab0d315294188fd9ec6efbf4105e5635d4872ef9c"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.kernel.name == "linux" then "memmap2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.2.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.kernel.name == "linux" then "perf_event_open_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".perf-event-open-sys."1.0.1" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "compiler_builtins")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "core")
      [ "default" ]
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "rustc-dep-of-std")
      [ "std" ]
      [ "use_std" ]
    ];
    dependencies = {
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "compiler_builtins" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "core" else null } = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "04e3e85b970d650e2ae6d70592474087051c11c54da7f7b4949725c5735fbcc6"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minifier."0.0.43" = overridableMkRustCrate (profileName: rec {
    name = "minifier";
    version = "0.0.43";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d81352bda6f4d04af1720afaa762054f66e16caffd93c1f86461a1c0ac4e695e"; };
    dependencies = {
      macro_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".macro-utils."0.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "minimal-lexical";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be0f75932c1f6cfae3c04000e40114adf955636e19040f9c0a2c380702aa1c7f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "alloc")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "compiler_builtins")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "core")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "rustc-dep-of-std")
    ];
    dependencies = {
      adler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."0.2.3" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "compiler_builtins" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "alloc" else null } = rustPackages."unknown".rustc-std-workspace-alloc."1.99.0" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "core" else null } = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.7.14" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.7.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8067b404fe97c70829f082dec8bcf4f71225d7eaea1d8645349cb76fa06205cc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "net" ]
      [ "os-ext" ]
      [ "os-poll" ]
      [ "os-util" ]
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc") "tcp")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc") "udp")
      [ "uds" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "miow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" { inherit profileName; };
      ${ if hostPlatform.isWindows then "ntapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ntapi."0.3.6" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "miow";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9f1c5b025cda876f66ef43a113f91ebc9f4ccef34843000e0adf6ebbab84e21"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".miri."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "miri";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/miri");
    dependencies = {
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.9.0" { inherit profileName; };
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      measureme = rustPackages."registry+https://github.com/rust-lang/crates.io-index".measureme."9.1.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" { inherit profileName; };
      rustc_workspace_hack = rustPackages."unknown".rustc-workspace-hack."1.0.0" { inherit profileName; };
      shell_escape = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shell-escape."0.1.5" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
    };
    devDependencies = {
      colored = rustPackages."registry+https://github.com/rust-lang/crates.io-index".colored."2.0.0" { inherit profileName; };
      compiletest_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiletest_rs."0.7.1" { inherit profileName; };
      rustc_version = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".new_debug_unreachable."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "new_debug_unreachable";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e4a24736216ec316047a1fc4252e27dabb04218aa4a3f37c6e7ddbf1f9782b54"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.0" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "7.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b1d11e1ef389c76fe5b81bcaf2ea32cf88b62bc494e19f493d0b30e7a930109"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      minimal_lexical = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ntapi."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "ntapi";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f6bb902e437b6d86e03cce10a7e2af662292c5dfef23b65899ea3ac9354ad44"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "user" ]
    ];
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.43" = overridableMkRustCrate (profileName: rec {
    name = "num-integer";
    version = "0.1.43";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d59457e662d541ba17869cf51cf177c0b5f0cbf476c66bdc90bf1edac4f875b"; };
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.12" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.12" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac267bcc07f48ee5f8935ab0d24f316fb722d7a1292e2913f0cc196b29ffd611"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" = overridableMkRustCrate (profileName: rec {
    name = "num_cpus";
    version = "1.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19e64526ebdee182341572e50e9ad03965aa510cd94427a4549448f285e957a1"; };
    dependencies = {
      ${ if (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "aarch64") && hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" { inherit profileName; };
      ${ if !hostPlatform.isWindows then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.26.2" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.26.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39f37e50073ccad23b6d09bcb5b263f4e76d3bb6038e4a3c08e52162ffa8abc2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "alloc")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/object" || rootFeatures' ? "test/backtrace") "archive")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/object" || rootFeatures' ? "test/backtrace") "coff")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "compiler_builtins")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "core")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/object" || rootFeatures' ? "test/backtrace") "elf")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/object" || rootFeatures' ? "test/backtrace") "macho")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/object" || rootFeatures' ? "test/backtrace") "pe")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/object" || rootFeatures' ? "test/backtrace") "read_core")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "rustc-dep-of-std")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/object" || rootFeatures' ? "test/backtrace") "unaligned")
    ];
    dependencies = {
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "compiler_builtins" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/object" || rootFeatures' ? "test/backtrace" then "memchr" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "alloc" else null } = rustPackages."unknown".rustc-std-workspace-alloc."1.99.0" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "core" else null } = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.28.1" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.28.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ce8b38d41f9f3618fc23f908faae61510f8d8ce2d99cbe910641e8f1971f084"; };
    features = builtins.concatLists [
      [ "archive" ]
      [ "coff" ]
      [ "compression" ]
      [ "crc32fast" ]
      [ "elf" ]
      [ "flate2" ]
      [ "hashbrown" ]
      [ "indexmap" ]
      [ "macho" ]
      [ "pe" ]
      [ "read" ]
      [ "read_core" ]
      [ "std" ]
      [ "unaligned" ]
      [ "write" ]
      [ "write_core" ]
      [ "write_std" ]
    ];
    dependencies = {
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.2.0" { inherit profileName; };
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.16" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".odht."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "odht";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a518809ac14b25b569624d0268eba1e88498f71615893dca57982bed7621abb"; };
    features = builtins.concatLists [
      [ "nightly" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.7.2" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af8b08b04175473088b46763e51ee54da5f9a164bc162f615b91bc179dbf15a3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "race" ]
      [ "std" ]
      [ "unstable" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "opaque-debug";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opener."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "opener";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ea3ebcd72a54701f56345f16785a6d3ac2df7e986d273eb4395c0b01db17952"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" then "bstr" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bstr."0.2.13" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl."0.10.35" = overridableMkRustCrate (profileName: rec {
    name = "openssl";
    version = "0.10.35";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "549430950c79ae24e6d02e0b7404534ecf311d94cc9f861e9e4020187d13d885"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "cargo/vendored-openssl") "vendored")
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.7.2" { inherit profileName; };
      ffi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "openssl-probe";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-src."111.17.0+1.1.1m" = overridableMkRustCrate (profileName: rec {
    name = "openssl-src";
    version = "111.17.0+1.1.1m";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05d6a336abd10814198f66e2a91ccd7336611f30334119ca8ce300536666fcf4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "cargo/vendored-openssl") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "cargo/vendored-openssl" then "cc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.65" = overridableMkRustCrate (profileName: rec {
    name = "openssl-sys";
    version = "0.9.65";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a7907e3bfa08bb85105209cdfcb6c63d109f8f6c1ed6ca318fff5c1853fbc1d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "cargo/vendored-openssl") "openssl-src")
      (lib.optional (rootFeatures' ? "cargo/vendored-openssl") "vendored")
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "cargo/vendored-openssl" then "openssl_src" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-src."111.17.0+1.1.1m" { profileName = "__noProfile"; };
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.18" { profileName = "__noProfile"; };
      ${ if hostPlatform.parsed.abi.name == "msvc" then "vcpkg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.10" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ordslice."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ordslice";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd20eec3dbe4376829cb7d80ae6ac45e0a766831dca50202ff2d40db46a8a024"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".os_info."3.0.7" = overridableMkRustCrate (profileName: rec {
    name = "os_info";
    version = "3.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ac91020bfed8cc3f8aa450d4c3b5fa1d3373fc091c8a92009f3b27749d5a227"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
    ];
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".os_str_bytes."6.0.0" = overridableMkRustCrate (profileName: rec {
    name = "os_str_bytes";
    version = "6.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e22443d1643a904602595ba1cd8f7d896afe56d26712531c5ff73a15b2fbf64"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "memchr" ]
      [ "raw_os_str" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".output_vt100."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "output_vt100";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53cdc5b785b7a58c5aad8216b3dfa114df64b0b06ae6e1501cef91df2fbdf8f9"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".packed_simd_2."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "packed_simd_2";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3278e0492f961fd4ae70909f56b2723a7e8d01a228427294e19cdfdebda89a17"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustfmt-nightly/generic-simd") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "rustfmt-nightly/generic-simd" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if rootFeatures' ? "rustfmt-nightly/generic-simd" then "libm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.1.4" { inherit profileName; };
    };
  });
  
  "unknown".panic_abort."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "panic_abort";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/panic_abort");
    dependencies = {
      alloc = rustPackages."unknown".alloc."0.0.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      core = rustPackages."unknown".core."0.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "unknown".panic_unwind."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "panic_unwind";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/panic_unwind");
    dependencies = {
      alloc = rustPackages."unknown".alloc."0.0.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      core = rustPackages."unknown".core."0.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      unwind = rustPackages."unknown".unwind."0.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-tokio-ipc."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "parity-tokio-ipc";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9981e32fb75e004cc148f5fb70342f393830e0a4aa62e3cc93b50976218d42b6"; };
    dependencies = {
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "rand" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "tokio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.8.4" { inherit profileName; };
      ${ if (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.5" { inherit profileName; };
      parking_lot_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d76e8e1493bcac0d2766c42737f34458f1c8c50c0d23bcb24ea953affb273216"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pathdiff."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "pathdiff";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "877630b3de15c0b64cc52f659345724fbf6bdad9bd9566699fc53688f3c34a34"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".perf-event-open-sys."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "perf-event-open-sys";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce9bedf5da2c234fdf2391ede2b90fabf585355f33100689bc364a3ea558561a"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "pest";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10f4872ae94d7b90ae48754df22fd42ad52ce740b8f370b03da4835417403e53"; };
    dependencies = {
      ucd_trie = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ucd-trie."0.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest_derive."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pest_derive";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "833d1ae558dc601e9a60366421196a8d94bc0ac980476d0b67e1d0988d72b2d0"; };
    dependencies = {
      pest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" { inherit profileName; };
      pest_generator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest_generator."2.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest_generator."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "pest_generator";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "99b8db626e31e5b81787b9783425769681b347011cc59471e33ea46d2ea0cf55"; };
    dependencies = {
      pest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" { inherit profileName; };
      pest_meta = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest_meta."2.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest_meta."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "pest_meta";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54be6e404f5317079812fc8f9f5279de376d8856929e21c184ecf6bbd692a11d"; };
    dependencies = {
      maplit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".maplit."1.0.2" { inherit profileName; };
      pest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" { inherit profileName; };
    };
    buildDependencies = {
      sha1 = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".sha-1."0.8.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".petgraph."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "petgraph";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "467d164a6de56270bd7c4d070df81d07beace25012d5103ced4e9ff08d6afdb7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "graphmap" ]
      [ "matrix_graph" ]
      [ "stable_graph" ]
    ];
    dependencies = {
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.2.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "phf";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3dfb61232e34fcb633f43d12c58f83c1df82962dcdfa565a4e866ffc17dafe12"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      phf_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_codegen."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "phf_codegen";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cbffee61585b0411840d3ece935cce9cb6321f01c45477d30066498cd5e1a815"; };
    dependencies = {
      phf_generator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_generator."0.8.0" { inherit profileName; };
      phf_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_generator."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "phf_generator";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "17367f0cc86f2d25802b2c26ee58a7b23faeccf78a396094c13dced0d0182526"; };
    dependencies = {
      phf_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.8.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "phf_shared";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c00cf8b9eafe68dde5e9eaa2cef8ee84a9336a47d566ec55ca16589633b65af7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      siphasher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e280fbe77cc62c91527259e9442153f4688736748d24660126286329742b4c6c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pin-utils";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.18" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d36492546b6af1463394d46f0c834346f31548646f6ba10849802c9c9a27ac33"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".polonius-engine."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "polonius-engine";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4e8e505342045d397d0b6674dcb82d6faf5cf40484d30eeb88fc82ef14e903f"; };
    dependencies = {
      datafrog = rustPackages."registry+https://github.com/rust-lang/crates.io-index".datafrog."2.0.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "237a5ed80e274dbc66f86bd59c1e25edc039660be53194b5fe0a482e0f2612ea"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".precomputed-hash."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "precomputed-hash";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pretty_assertions."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "pretty_assertions";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1cab0e7c02cf376875e9335e0ba1da535775beb5450d21e1dffca068818ed98b"; };
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "ctor" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ctor."0.1.15" { profileName = "__noProfile"; };
      diff = rustPackages."registry+https://github.com/rust-lang/crates.io-index".diff."0.1.12" { inherit profileName; };
      ${ if hostPlatform.isWindows then "output_vt100" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".output_vt100."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pretty_env_logger."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "pretty_env_logger";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "926d36b9553851b8b0005f1275891b392ee4d2d833852c417ed025477350fb9d"; };
    dependencies = {
      ${ if rootFeatures' ? "cargo/pretty-env-logger" || rootFeatures' ? "cargo/pretty_env_logger" then "env_logger" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.7.1" { inherit profileName; };
      ${ if rootFeatures' ? "cargo/pretty-env-logger" || rootFeatures' ? "cargo/pretty_env_logger" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785"; };
    dependencies = {
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-error";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "syn" ]
      [ "syn-error" ]
    ];
    dependencies = {
      proc_macro_error_attr = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" { profileName = "__noProfile"; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-error-attr";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "edc3358ebc67bc8b7fa0c007f945b0b18226f78437d61bec735a9eb96b61ee70"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { inherit profileName; };
    };
  });
  
  "unknown".proc_macro."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "proc_macro";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/proc_macro");
    dependencies = {
      std = rustPackages."unknown".std."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".profiler_builtins."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "profiler_builtins";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/profiler_builtins");
    dependencies = {
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      core = rustPackages."unknown".core."0.0.0" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".psm."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "psm";
    version = "0.1.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cd136ff4382c4753fc061cb9e4712ab2af263376b95bbd5bd8cd50c020b78e69"; };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pulldown-cmark."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "pulldown-cmark";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34f197a544b0c9ab3ae46c359a7ec9cbbb5c7bf97054266fecb7ead794a181d6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "getopts" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      getopts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getopts."0.2.21" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      unicase = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".punycode."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "punycode";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e9e1dcb320d6839f6edb64f7a4a59d39b30480d4d1765b56873f7c858538a5fe"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" = overridableMkRustCrate (profileName: rec {
    name = "quick-error";
    version = "1.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-error."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "quick-error";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3ac73b1112776fc109b2e61909bc46c7e1bf0d7f690ffb1676553acce16d5cda"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quine-mc_cluskey."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "quine-mc_cluskey";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa563d17ecb180e500da1cfd2b028310ac758de548efdd203e18f283af693f37"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".racer."2.2.1" = overridableMkRustCrate (profileName: rec {
    name = "racer";
    version = "2.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e92c370d4ede487c4d56c8104d1d425cd447db29fe4a668b0f368a46fa9a5861"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.9" { profileName = "__noProfile"; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.7.1" { inherit profileName; };
      humantime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."2.0.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rls_span = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-span."0.5.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "getrandom_package" ]
      [ "libc" ]
      [ "rand_pcg" ]
      [ "small_rng" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom_package = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.14" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten") then "rand_chacha" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.2.2" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "rand_hc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.2.0" { inherit profileName; };
      rand_pcg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e7573632e6454cf6b99d7aac4ccca54be06da05aca2ef7423d22d27d4d4bcd8"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      [ "rand_hc" ]
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten") then "rand_chacha" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.0" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "rand_hc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.8" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e12735cf05c9e10bf21534da50a147b924d555dc7a547c42e6bb2d5b6017ae0d"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.8" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34cf66eb183df1c5876e2dcf6b13d57340741e8dc255b48e40a26de954d06ae7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_hc";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_hc";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3190ef7066a446f2e7f42e239d161e905420ccab01eb967c9eb27d21b2322a73"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_pcg";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "16abd0c1b639e9eb4d7c50c0b8100b0d0f849be2349829c740fe8e6eb4816429"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_xorshift."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_xorshift";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77d416b86801d23dde1aa643023b775c3a462efc0ed96443add11546cdf1dca8"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_xoshiro."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_xoshiro";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a9fcdd2e881d02f1d9390ae47ad8e5696a9e4be7b547a1da2afbc61973217004"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_xoshiro."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_xoshiro";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f97cdb2a36ed4183de61b2f824cc45c9f1037f28afe0a322e9fff4c108b5aaa"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "rayon";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c06aca804d41dbc8ba42dfd964f0d01334eceb64314b9ecf7c5fad5188a06d90"; };
    dependencies = {
      crossbeam_deque = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.0" { inherit profileName; };
      rayon_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.9.1" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.9.1" = overridableMkRustCrate (profileName: rec {
    name = "rayon-core";
    version = "1.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d78120e2c850279833f1dd3582f730c4ab53ed95aeaaaa862a2a5c71b1656d8e"; };
    dependencies = {
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.2" { inherit profileName; };
      crossbeam_deque = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.6" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "redox_users";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "528532f3d801c87aec9def2add9ca802fe569e44a544afe633765267840abe64"; };
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.0" { inherit profileName; };
      syscall = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d07a8629359eb56f1e2fb1652bb04212c072a87ba68546a04065d525673ac461"; };
    features = builtins.concatLists [
      [ "aho-corasick" ]
      [ "default" ]
      [ "memchr" ]
      [ "perf" ]
      [ "perf-cache" ]
      [ "perf-dfa" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
    dependencies = {
      aho_corasick = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.18" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "regex-syntax" ]
      [ "std" ]
    ];
    dependencies = {
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.6.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "unknown".remote-test-client."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "remote-test-client";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/remote-test-client");
  });
  
  "unknown".remote-test-server."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "remote-test-server";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/remote-test-server");
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "remove_dir_all";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".rls."1.41.0" = overridableMkRustCrate (profileName: rec {
    name = "rls";
    version = "1.41.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rls");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rls/clippy") "clippy")
      (lib.optional (rootFeatures' ? "rls/clippy" || rootFeatures' ? "rls/clippy_lints") "clippy_lints")
      (lib.optional (rootFeatures' ? "rls/default") "default")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc") "ipc")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls/rls-ipc") "rls-ipc")
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      cargo = rustPackages."unknown".cargo."0.62.0" { inherit profileName; };
      cargo_util = rustPackages."unknown".cargo-util."0.1.2" { inherit profileName; };
      cargo_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.14.0" { inherit profileName; };
      ${ if rootFeatures' ? "rls/clippy" || rootFeatures' ? "rls/clippy_lints" then "clippy_lints" else null } = rustPackages."unknown".clippy_lints."0.1.61" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.2" { inherit profileName; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.9.0" { inherit profileName; };
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.1" { inherit profileName; };
      home = rustPackages."registry+https://github.com/rust-lang/crates.io-index".home."0.5.3" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      lsp_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lsp-types."0.60.0" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
      ordslice = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ordslice."0.3.0" { inherit profileName; };
      racer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".racer."2.2.1" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" { inherit profileName; };
      rayon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.1" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rls_analysis = rustPackages."unknown".rls-analysis."0.18.3" { inherit profileName; };
      rls_data = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-data."0.19.1" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls/rls-ipc" then "rls_ipc" else null } = rustPackages."unknown".rls-ipc."0.1.0" { inherit profileName; };
      rls_rustc = rustPackages."unknown".rls-rustc."0.6.0" { inherit profileName; };
      rls_span = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-span."0.5.3" { inherit profileName; };
      rls_vfs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-vfs."0.8.0" { inherit profileName; };
      rustc_workspace_hack = rustPackages."unknown".rustc-workspace-hack."1.0.0" { inherit profileName; };
      rustc_tools_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_tools_util."0.2.0" { inherit profileName; };
      rustfmt_nightly = rustPackages."unknown".rustfmt-nightly."1.4.38" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.125" { profileName = "__noProfile"; };
      serde_ignored = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_ignored."0.1.2" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
      toml_edit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.13.4" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
    };
    devDependencies = {
      difference = rustPackages."registry+https://github.com/rust-lang/crates.io-index".difference."2.0.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" { inherit profileName; };
      lsp_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lsp-codec."0.3.0" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.8.4" { inherit profileName; };
      tokio_stream = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.7" { inherit profileName; };
      tokio_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.6.7" { inherit profileName; };
    };
    buildDependencies = {
      rustc_tools_util = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_tools_util."0.2.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".rls-analysis."0.18.3" = overridableMkRustCrate (profileName: rec {
    name = "rls-analysis";
    version = "0.18.3";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rls/rls-analysis");
    features = builtins.concatLists [
      [ "default" ]
      (lib.optional (rootFeatures' ? "rls-analysis/derive") "derive")
      (lib.optional (rootFeatures' ? "rls-analysis/idents") "idents")
    ];
    dependencies = {
      derive_new = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive-new."0.5.8" { profileName = "__noProfile"; };
      fst = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fst."0.4.5" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".json."0.12.4" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rls_data = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-data."0.19.1" { inherit profileName; };
      rls_span = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-span."0.5.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
    };
    devDependencies = {
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.9.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rls-data."0.19.1" = overridableMkRustCrate (profileName: rec {
    name = "rls-data";
    version = "0.19.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a58135eb039f3a3279a33779192f0ee78b56f57ae636e25cec83530e41debb99"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
    ];
    dependencies = {
      rls_span = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-span."0.5.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "unknown".rls-ipc."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rls-ipc";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rls/rls-ipc");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-rustc/ipc") "client")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server") "jsonrpc-ipc-server")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/server") "server")
    ];
    dependencies = {
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      jsonrpc_core_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core-client."18.0.0" { inherit profileName; };
      jsonrpc_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-derive."18.0.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" then "jsonrpc_ipc_server" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-ipc-server."18.0.0" { inherit profileName; };
      rls_data = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-data."0.19.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "unknown".rls-rustc."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "rls-rustc";
    version = "0.6.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rls/rls-rustc");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rls/clippy" || rootFeatures' ? "rls-rustc/clippy") "clippy")
      (lib.optional (rootFeatures' ? "rls/clippy" || rootFeatures' ? "rls-rustc/clippy" || rootFeatures' ? "rls-rustc/clippy_lints") "clippy_lints")
      [ "default" ]
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/futures" || rootFeatures' ? "rls-rustc/ipc") "futures")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/ipc") "ipc")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/ipc" || rootFeatures' ? "rls-rustc/rls-data") "rls-data")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/ipc" || rootFeatures' ? "rls-rustc/rls-ipc") "rls-ipc")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/ipc" || rootFeatures' ? "rls-rustc/serde") "serde")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/ipc" || rootFeatures' ? "rls-rustc/tokio") "tokio")
    ];
    dependencies = {
      ${ if rootFeatures' ? "rls/clippy" || rootFeatures' ? "rls-rustc/clippy" || rootFeatures' ? "rls-rustc/clippy_lints" then "clippy_lints" else null } = rustPackages."unknown".clippy_lints."0.1.61" { inherit profileName; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.9.0" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/futures" || rootFeatures' ? "rls-rustc/ipc" then "futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.19" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/ipc" || rootFeatures' ? "rls-rustc/rls-data" then "rls_data" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-data."0.19.1" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/ipc" || rootFeatures' ? "rls-rustc/rls-ipc" then "rls_ipc" else null } = rustPackages."unknown".rls-ipc."0.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/ipc" || rootFeatures' ? "rls-rustc/serde" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-rustc/ipc" || rootFeatures' ? "rls-rustc/tokio" then "tokio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rls-span."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "rls-span";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0eea58478fc06e15f71b03236612173a1b81e9770314edecfa664375e3e4c86"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
      (lib.optional (rootFeatures' ? "rls-analysis/idents") "nightly")
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rls-vfs."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "rls-vfs";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce4b57b25b4330ed5ec14028fc02141e083ddafda327e7eb598dc0569c8c83c9"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rls_span = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-span."0.5.3" { inherit profileName; };
    };
  });
  
  "unknown".rust-demangler."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "rust-demangler";
    version = "0.0.1";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rust-demangler");
    dependencies = {
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" { inherit profileName; };
    };
  });
  
  "unknown".rustbook."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustbook";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rustbook");
    dependencies = {
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" { inherit profileName; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.7.1" { inherit profileName; };
      mdbook = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mdbook."0.4.15" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" = overridableMkRustCrate (profileName: rec {
    name = "rustc-demangle";
    version = "0.1.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342"; };
    features = builtins.concatLists [
      [ "compiler_builtins" ]
      [ "core" ]
      [ "rustc-dep-of-std" ]
    ];
    dependencies = {
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hash";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "unknown".rustc-main."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-main";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc-main/jemalloc") "jemalloc")
      (lib.optional (rootFeatures' ? "rustc-main/llvm") "llvm")
      (lib.optional (rootFeatures' ? "rustc-main/max_level_info") "max_level_info")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler") "rustc_use_parallel_compiler")
      (lib.optional (rootFeatures' ? "rustc-main/jemalloc" || rootFeatures' ? "rustc-main/tikv-jemalloc-sys") "tikv-jemalloc-sys")
    ];
    dependencies = {
      rustc_codegen_ssa = rustPackages."unknown".rustc_codegen_ssa."0.0.0" { inherit profileName; };
      rustc_driver = rustPackages."unknown".rustc_driver."0.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/jemalloc" || rootFeatures' ? "rustc-main/tikv-jemalloc-sys" then "tikv_jemalloc_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tikv-jemalloc-sys."0.4.1+5.2.1-patched" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-rayon."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "rustc-rayon";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9974ab223660e61c1b4e7b43b827379df286736ca988308ce7e16f59f2d89246"; };
    dependencies = {
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rayon" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler" then "crossbeam_deque" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rayon" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler" then "either" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.0" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rayon" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler" then "rayon_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-rayon-core."0.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-rayon-core."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "rustc-rayon-core";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "564bfd27be8db888d0fa76aa4335e7851aaed0c2c11ad1e93aeb9349f6b88500"; };
    dependencies = {
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon" || rootFeatures' ? "rustc_data_structures/rayon-core" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rayon" || rootFeatures' ? "rustc_interface/rustc-rayon-core" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon" || rootFeatures' ? "rustc_middle/rustc-rayon-core" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_impl/rustc-rayon-core" || rootFeatures' ? "rustc_query_impl/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_system/rustc-rayon-core" || rootFeatures' ? "rustc_query_system/rustc_use_parallel_compiler" then "crossbeam_deque" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon" || rootFeatures' ? "rustc_data_structures/rayon-core" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rayon" || rootFeatures' ? "rustc_interface/rustc-rayon-core" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon" || rootFeatures' ? "rustc_middle/rustc-rayon-core" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_impl/rustc-rayon-core" || rootFeatures' ? "rustc_query_impl/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_system/rustc-rayon-core" || rootFeatures' ? "rustc_query_system/rustc_use_parallel_compiler" then "crossbeam_utils" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.6" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon" || rootFeatures' ? "rustc_data_structures/rayon-core" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rayon" || rootFeatures' ? "rustc_interface/rustc-rayon-core" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon" || rootFeatures' ? "rustc_middle/rustc-rayon-core" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_impl/rustc-rayon-core" || rootFeatures' ? "rustc_query_impl/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_system/rustc-rayon-core" || rootFeatures' ? "rustc_query_system/rustc_use_parallel_compiler" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon" || rootFeatures' ? "rustc_data_structures/rayon-core" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rayon" || rootFeatures' ? "rustc_interface/rustc-rayon-core" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon" || rootFeatures' ? "rustc_middle/rustc-rayon-core" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_impl/rustc-rayon-core" || rootFeatures' ? "rustc_query_impl/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_system/rustc-rayon-core" || rootFeatures' ? "rustc_query_system/rustc_use_parallel_compiler" then "num_cpus" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-semver."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-semver";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5be1bdc7edf596692617627bbfeaba522131b18e06ca4df2b6b689e3c5d5ce84"; };
  });
  
  "unknown".rustc-std-workspace-alloc."1.99.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-std-workspace-alloc";
    version = "1.99.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/rustc-std-workspace-alloc");
    dependencies = {
      alloc = rustPackages."unknown".alloc."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc-std-workspace-core."1.99.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-std-workspace-core";
    version = "1.99.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/rustc-std-workspace-core");
    dependencies = {
      core = rustPackages."unknown".core."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc-std-workspace-std."1.99.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-std-workspace-std";
    version = "1.99.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/rustc-std-workspace-std");
    dependencies = {
      std = rustPackages."unknown".std."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc-workspace-hack."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-workspace-hack";
    version = "1.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rustc-workspace-hack");
    dependencies = {
      bstr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bstr."0.2.13" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.3.4" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.6" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      libz_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      rand_core_0_5 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".rustc_apfloat."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_apfloat";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_apfloat");
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_arena."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_arena";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_arena");
    dependencies = {
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_ast."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_ast";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_ast");
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_lexer = rustPackages."unknown".rustc_lexer."0.1.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_ast_lowering."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_ast_lowering";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_ast_lowering");
    dependencies = {
      rustc_arena = rustPackages."unknown".rustc_arena."0.0.0" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_query_system = rustPackages."unknown".rustc_query_system."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_ast_passes."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_ast_passes";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_ast_passes");
    dependencies = {
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_parse = rustPackages."unknown".rustc_parse."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_ast_pretty."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_ast_pretty";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_ast_pretty");
    dependencies = {
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_attr."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_attr";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_attr");
    dependencies = {
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_lexer = rustPackages."unknown".rustc_lexer."0.1.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_borrowck."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_borrowck";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_borrowck");
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.0" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      polonius_engine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".polonius-engine."0.13.0" { inherit profileName; };
      rustc_const_eval = rustPackages."unknown".rustc_const_eval."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_graphviz = rustPackages."unknown".rustc_graphviz."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_infer = rustPackages."unknown".rustc_infer."0.0.0" { inherit profileName; };
      rustc_lexer = rustPackages."unknown".rustc_lexer."0.1.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_mir_dataflow = rustPackages."unknown".rustc_mir_dataflow."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      rustc_trait_selection = rustPackages."unknown".rustc_trait_selection."0.0.0" { inherit profileName; };
      rustc_traits = rustPackages."unknown".rustc_traits."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_builtin_macros."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_builtin_macros";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_builtin_macros");
    dependencies = {
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_expand = rustPackages."unknown".rustc_expand."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_lexer = rustPackages."unknown".rustc_lexer."0.1.0" { inherit profileName; };
      rustc_lint_defs = rustPackages."unknown".rustc_lint_defs."0.0.0" { inherit profileName; };
      rustc_parse = rustPackages."unknown".rustc_parse."0.0.0" { inherit profileName; };
      rustc_parse_format = rustPackages."unknown".rustc_parse_format."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_codegen_llvm."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_codegen_llvm";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_codegen_llvm");
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      cstr = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cstr."0.2.8" { profileName = "__noProfile"; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.1" { inherit profileName; };
      measureme = rustPackages."registry+https://github.com/rust-lang/crates.io-index".measureme."10.0.0" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" { inherit profileName; };
      rustc_arena = rustPackages."unknown".rustc_arena."0.0.0" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_codegen_ssa = rustPackages."unknown".rustc_codegen_ssa."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_fs_util = rustPackages."unknown".rustc_fs_util."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_llvm = rustPackages."unknown".rustc_llvm."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_metadata = rustPackages."unknown".rustc_metadata."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_query_system = rustPackages."unknown".rustc_query_system."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_codegen_ssa."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_codegen_ssa";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_codegen_ssa");
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      cc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      jobserver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.28.1" { inherit profileName; };
      pathdiff = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pathdiff."0.2.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustc_apfloat = rustPackages."unknown".rustc_apfloat."0.0.0" { inherit profileName; };
      rustc_arena = rustPackages."unknown".rustc_arena."0.0.0" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_fs_util = rustPackages."unknown".rustc_fs_util."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_incremental = rustPackages."unknown".rustc_incremental."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_metadata = rustPackages."unknown".rustc_metadata."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_query_system = rustPackages."unknown".rustc_query_system."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_symbol_mangling = rustPackages."unknown".rustc_symbol_mangling."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      snap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snap."1.0.1" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
      thorin = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thorin-dwp."0.2.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_const_eval."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_const_eval";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_const_eval");
    dependencies = {
      rustc_apfloat = rustPackages."unknown".rustc_apfloat."0.0.0" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_infer = rustPackages."unknown".rustc_infer."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_mir_dataflow = rustPackages."unknown".rustc_mir_dataflow."0.0.0" { inherit profileName; };
      rustc_query_system = rustPackages."unknown".rustc_query_system."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      rustc_trait_selection = rustPackages."unknown".rustc_trait_selection."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_data_structures."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_data_structures";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_data_structures");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler") "rayon")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon-core" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler") "rayon-core")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler") "rustc_use_parallel_compiler")
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ena = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ena."0.14.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      jobserver_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      measureme = rustPackages."registry+https://github.com/rust-lang/crates.io-index".measureme."10.0.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "memmap2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.2.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" then "rayon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-rayon."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_data_structures/rayon-core" || rootFeatures' ? "rustc_data_structures/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" then "rayon_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-rayon-core."0.3.2" { inherit profileName; };
      rustc_graphviz = rustPackages."unknown".rustc_graphviz."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      stable_deref_trait = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" { inherit profileName; };
      stacker = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stacker."0.1.14" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".rustc_driver."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_driver";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_driver");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc-main/llvm" || rootFeatures' ? "rustc_driver/llvm") "llvm")
      (lib.optional (rootFeatures' ? "rustc-main/max_level_info" || rootFeatures' ? "rustc_driver/max_level_info") "max_level_info")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler") "rustc_use_parallel_compiler")
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_codegen_ssa = rustPackages."unknown".rustc_codegen_ssa."0.0.0" { inherit profileName; };
      rustc_const_eval = rustPackages."unknown".rustc_const_eval."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_error_codes = rustPackages."unknown".rustc_error_codes."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_hir_pretty = rustPackages."unknown".rustc_hir_pretty."0.0.0" { inherit profileName; };
      rustc_interface = rustPackages."unknown".rustc_interface."0.0.0" { inherit profileName; };
      rustc_lint = rustPackages."unknown".rustc_lint."0.0.0" { inherit profileName; };
      rustc_log = rustPackages."unknown".rustc_log."0.0.0" { inherit profileName; };
      rustc_metadata = rustPackages."unknown".rustc_metadata."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_parse = rustPackages."unknown".rustc_parse."0.0.0" { inherit profileName; };
      rustc_plugin_impl = rustPackages."unknown".rustc_plugin_impl."0.0.0" { inherit profileName; };
      rustc_save_analysis = rustPackages."unknown".rustc_save_analysis."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      rustc_typeck = rustPackages."unknown".rustc_typeck."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".rustc_error_codes."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_error_codes";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_error_codes");
  });
  
  "unknown".rustc_errors."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_errors";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_errors");
    dependencies = {
      annotate_snippets = rustPackages."registry+https://github.com/rust-lang/crates.io-index".annotate-snippets."0.8.0" { inherit profileName; };
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_lint_defs = rustPackages."unknown".rustc_lint_defs."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" { inherit profileName; };
      termize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termize."0.1.1" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.8" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".rustc_expand."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_expand";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_expand");
    dependencies = {
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_passes = rustPackages."unknown".rustc_ast_passes."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_lexer = rustPackages."unknown".rustc_lexer."0.1.0" { inherit profileName; };
      rustc_lint_defs = rustPackages."unknown".rustc_lint_defs."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_parse = rustPackages."unknown".rustc_parse."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_feature."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_feature";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_feature");
    dependencies = {
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_fs_util."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_fs_util";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_fs_util");
  });
  
  "unknown".rustc_graphviz."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_graphviz";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_graphviz");
  });
  
  "unknown".rustc_hir."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_hir";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_hir");
    dependencies = {
      odht = rustPackages."registry+https://github.com/rust-lang/crates.io-index".odht."0.3.1" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_hir_pretty."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_hir_pretty";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_hir_pretty");
    dependencies = {
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_incremental."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_incremental";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_incremental");
    dependencies = {
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_fs_util = rustPackages."unknown".rustc_fs_util."0.0.0" { inherit profileName; };
      rustc_graphviz = rustPackages."unknown".rustc_graphviz."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_index."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_index";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_index");
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_infer."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_infer";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_infer");
    dependencies = {
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_interface."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_interface";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_interface");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc-main/llvm" || rootFeatures' ? "rustc_driver/llvm" || rootFeatures' ? "rustc_interface/llvm") "llvm")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rayon" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler") "rayon")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rustc-rayon-core" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler") "rustc-rayon-core")
      (lib.optional (rootFeatures' ? "rustc-main/llvm" || rootFeatures' ? "rustc_driver/llvm" || rootFeatures' ? "rustc_interface/llvm" || rootFeatures' ? "rustc_interface/rustc_codegen_llvm") "rustc_codegen_llvm")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler") "rustc_use_parallel_compiler")
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.1" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rayon" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" then "rayon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-rayon."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rustc-rayon-core" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" then "rustc_rayon_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-rayon-core."0.3.2" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_lowering = rustPackages."unknown".rustc_ast_lowering."0.0.0" { inherit profileName; };
      rustc_ast_passes = rustPackages."unknown".rustc_ast_passes."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_borrowck = rustPackages."unknown".rustc_borrowck."0.0.0" { inherit profileName; };
      rustc_builtin_macros = rustPackages."unknown".rustc_builtin_macros."0.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/llvm" || rootFeatures' ? "rustc_driver/llvm" || rootFeatures' ? "rustc_interface/llvm" || rootFeatures' ? "rustc_interface/rustc_codegen_llvm" then "rustc_codegen_llvm" else null } = rustPackages."unknown".rustc_codegen_llvm."0.0.0" { inherit profileName; };
      rustc_codegen_ssa = rustPackages."unknown".rustc_codegen_ssa."0.0.0" { inherit profileName; };
      rustc_const_eval = rustPackages."unknown".rustc_const_eval."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_expand = rustPackages."unknown".rustc_expand."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_incremental = rustPackages."unknown".rustc_incremental."0.0.0" { inherit profileName; };
      rustc_lint = rustPackages."unknown".rustc_lint."0.0.0" { inherit profileName; };
      rustc_metadata = rustPackages."unknown".rustc_metadata."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_mir_build = rustPackages."unknown".rustc_mir_build."0.0.0" { inherit profileName; };
      rustc_mir_transform = rustPackages."unknown".rustc_mir_transform."0.0.0" { inherit profileName; };
      rustc_monomorphize = rustPackages."unknown".rustc_monomorphize."0.0.0" { inherit profileName; };
      rustc_parse = rustPackages."unknown".rustc_parse."0.0.0" { inherit profileName; };
      rustc_passes = rustPackages."unknown".rustc_passes."0.0.0" { inherit profileName; };
      rustc_plugin_impl = rustPackages."unknown".rustc_plugin_impl."0.0.0" { inherit profileName; };
      rustc_privacy = rustPackages."unknown".rustc_privacy."0.0.0" { inherit profileName; };
      rustc_query_impl = rustPackages."unknown".rustc_query_impl."0.0.0" { inherit profileName; };
      rustc_resolve = rustPackages."unknown".rustc_resolve."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_symbol_mangling = rustPackages."unknown".rustc_symbol_mangling."0.0.0" { inherit profileName; };
      rustc_trait_selection = rustPackages."unknown".rustc_trait_selection."0.0.0" { inherit profileName; };
      rustc_traits = rustPackages."unknown".rustc_traits."0.0.0" { inherit profileName; };
      rustc_ty_utils = rustPackages."unknown".rustc_ty_utils."0.0.0" { inherit profileName; };
      rustc_typeck = rustPackages."unknown".rustc_typeck."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    devDependencies = {
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_lexer."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_lexer";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_lexer");
    dependencies = {
      unic_emoji_char = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unic-emoji-char."0.9.0" { inherit profileName; };
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { inherit profileName; };
    };
    devDependencies = {
      expect_test = rustPackages."registry+https://github.com/rust-lang/crates.io-index".expect-test."1.0.1" { inherit profileName; };
    };
  });
  
  "unknown".rustc_lint."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_lint";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_lint");
    dependencies = {
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_infer = rustPackages."unknown".rustc_infer."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_parse_format = rustPackages."unknown".rustc_parse_format."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      rustc_trait_selection = rustPackages."unknown".rustc_trait_selection."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      unicode_security = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-security."0.0.5" { inherit profileName; };
    };
  });
  
  "unknown".rustc_lint_defs."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_lint_defs";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_lint_defs");
    dependencies = {
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_llvm."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_llvm";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_llvm");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc_llvm/emscripten") "emscripten")
      (lib.optional (rootFeatures' ? "rustc_llvm/static-libstdcpp") "static-libstdcpp")
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".rustc_log."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_log";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_log");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc-main/max_level_info" || rootFeatures' ? "rustc_driver/max_level_info" || rootFeatures' ? "rustc_log/max_level_info") "max_level_info")
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.3" { inherit profileName; };
      tracing_tree = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-tree."0.2.0" { inherit profileName; };
    };
    devDependencies = {
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_macros";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_macros");
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
      synstructure = rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" { inherit profileName; };
    };
  });
  
  "unknown".rustc_metadata."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_metadata";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_metadata");
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.1" { inherit profileName; };
      odht = rustPackages."registry+https://github.com/rust-lang/crates.io-index".odht."0.3.1" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_expand = rustPackages."unknown".rustc_expand."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_hir_pretty = rustPackages."unknown".rustc_hir_pretty."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      snap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snap."1.0.1" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_middle."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_middle";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_middle");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler") "rustc-rayon")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon-core" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler") "rustc-rayon-core")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler") "rustc_use_parallel_compiler")
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      chalk_ir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chalk-ir."0.80.0" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.0" { inherit profileName; };
      gsgdt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gsgdt."0.1.2" { inherit profileName; };
      polonius_engine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".polonius-engine."0.13.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" { inherit profileName; };
      rand_xoshiro = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_xoshiro."0.6.0" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler" then "rustc_rayon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-rayon."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_middle/rustc-rayon-core" || rootFeatures' ? "rustc_middle/rustc_use_parallel_compiler" then "rustc_rayon_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-rayon-core."0.3.2" { inherit profileName; };
      rustc_apfloat = rustPackages."unknown".rustc_apfloat."0.0.0" { inherit profileName; };
      rustc_arena = rustPackages."unknown".rustc_arena."0.0.0" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_graphviz = rustPackages."unknown".rustc_graphviz."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_query_system = rustPackages."unknown".rustc_query_system."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      rustc_type_ir = rustPackages."unknown".rustc_type_ir."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_mir_build."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_mir_build";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_mir_build");
    dependencies = {
      rustc_apfloat = rustPackages."unknown".rustc_apfloat."0.0.0" { inherit profileName; };
      rustc_arena = rustPackages."unknown".rustc_arena."0.0.0" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_infer = rustPackages."unknown".rustc_infer."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      rustc_trait_selection = rustPackages."unknown".rustc_trait_selection."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_mir_dataflow."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_mir_dataflow";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_mir_dataflow");
    dependencies = {
      polonius_engine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".polonius-engine."0.13.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_graphviz = rustPackages."unknown".rustc_graphviz."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_mir_transform."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_mir_transform";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_mir_transform");
    dependencies = {
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_const_eval = rustPackages."unknown".rustc_const_eval."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_mir_dataflow = rustPackages."unknown".rustc_mir_dataflow."0.0.0" { inherit profileName; };
      rustc_query_system = rustPackages."unknown".rustc_query_system."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      rustc_trait_selection = rustPackages."unknown".rustc_trait_selection."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
    devDependencies = {
      coverage_test_macros = buildRustPackages."unknown".coverage_test_macros."0.0.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".rustc_monomorphize."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_monomorphize";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_monomorphize");
    dependencies = {
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_parse."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_parse";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_parse");
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_lexer = rustPackages."unknown".rustc_lexer."0.1.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      unicode_normalization = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.13" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.8" { inherit profileName; };
    };
  });
  
  "unknown".rustc_parse_format."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_parse_format";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_parse_format");
    dependencies = {
      rustc_lexer = rustPackages."unknown".rustc_lexer."0.1.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_passes."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_passes";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_passes");
    dependencies = {
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_lexer = rustPackages."unknown".rustc_lexer."0.1.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_parse = rustPackages."unknown".rustc_parse."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_plugin_impl."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_plugin_impl";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_plugin_impl");
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.1" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_lint = rustPackages."unknown".rustc_lint."0.0.0" { inherit profileName; };
      rustc_metadata = rustPackages."unknown".rustc_metadata."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_privacy."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_privacy";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_privacy");
    dependencies = {
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_trait_selection = rustPackages."unknown".rustc_trait_selection."0.0.0" { inherit profileName; };
      rustc_typeck = rustPackages."unknown".rustc_typeck."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_query_impl."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_query_impl";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_query_impl");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_impl/rustc-rayon-core" || rootFeatures' ? "rustc_query_impl/rustc_use_parallel_compiler") "rustc-rayon-core")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_impl/rustc_use_parallel_compiler") "rustc_use_parallel_compiler")
    ];
    dependencies = {
      measureme = rustPackages."registry+https://github.com/rust-lang/crates.io-index".measureme."10.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_impl/rustc-rayon-core" || rootFeatures' ? "rustc_query_impl/rustc_use_parallel_compiler" then "rustc_rayon_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-rayon-core."0.3.2" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_query_system = rustPackages."unknown".rustc_query_system."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_query_system."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_query_system";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_query_system");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_impl/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_system/rustc-rayon-core" || rootFeatures' ? "rustc_query_system/rustc_use_parallel_compiler") "rustc-rayon-core")
      (lib.optional (rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_impl/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_system/rustc_use_parallel_compiler") "rustc_use_parallel_compiler")
    ];
    dependencies = {
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "rustc-main/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_driver/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_interface/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_impl/rustc_use_parallel_compiler" || rootFeatures' ? "rustc_query_system/rustc-rayon-core" || rootFeatures' ? "rustc_query_system/rustc_use_parallel_compiler" then "rustc_rayon_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-rayon-core."0.3.2" { inherit profileName; };
      rustc_arena = rustPackages."unknown".rustc_arena."0.0.0" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_resolve."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_resolve";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_resolve");
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      rustc_arena = rustPackages."unknown".rustc_arena."0.0.0" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_lowering = rustPackages."unknown".rustc_ast_lowering."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_expand = rustPackages."unknown".rustc_expand."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_metadata = rustPackages."unknown".rustc_metadata."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_query_system = rustPackages."unknown".rustc_query_system."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_save_analysis."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_save_analysis";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_save_analysis");
    dependencies = {
      rls_data = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-data."0.19.1" { inherit profileName; };
      rls_span = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rls-span."0.5.3" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_ast_pretty = rustPackages."unknown".rustc_ast_pretty."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_hir_pretty = rustPackages."unknown".rustc_hir_pretty."0.0.0" { inherit profileName; };
      rustc_lexer = rustPackages."unknown".rustc_lexer."0.1.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_serialize."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_serialize";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_serialize");
    dependencies = {
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
    };
    devDependencies = {
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".rustc_session."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_session";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_session");
    dependencies = {
      getopts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getopts."0.2.21" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_feature = rustPackages."unknown".rustc_feature."0.0.0" { inherit profileName; };
      rustc_fs_util = rustPackages."unknown".rustc_fs_util."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_lint_defs = rustPackages."unknown".rustc_lint_defs."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_span."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_span";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_span");
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      md5 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.0" { inherit profileName; };
      rustc_arena = rustPackages."unknown".rustc_arena."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      scoped_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" { inherit profileName; };
      sha1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha-1."0.10.0" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.1" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.8" { inherit profileName; };
    };
  });
  
  "unknown".rustc_symbol_mangling."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_symbol_mangling";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_symbol_mangling");
    dependencies = {
      punycode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".punycode."0.4.1" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_query_system = rustPackages."unknown".rustc_query_system."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_target."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_target";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_target");
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_tools_util."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_tools_util";
    version = "0.2.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/clippy/rustc_tools_util");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc_tools_util/deny-warnings") "deny-warnings")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_tools_util."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_tools_util";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b725dadae9fabc488df69a287f5a99c5eaf5d10853842a8a3dfac52476f544ee"; };
  });
  
  "unknown".rustc_trait_selection."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_trait_selection";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_trait_selection");
    dependencies = {
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_infer = rustPackages."unknown".rustc_infer."0.0.0" { inherit profileName; };
      rustc_lint_defs = rustPackages."unknown".rustc_lint_defs."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_parse_format = rustPackages."unknown".rustc_parse_format."0.0.0" { inherit profileName; };
      rustc_query_system = rustPackages."unknown".rustc_query_system."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_traits."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_traits";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_traits");
    dependencies = {
      chalk_engine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chalk-engine."0.80.0" { inherit profileName; };
      chalk_ir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chalk-ir."0.80.0" { inherit profileName; };
      chalk_solve = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chalk-solve."0.80.0" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_infer = rustPackages."unknown".rustc_infer."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_trait_selection = rustPackages."unknown".rustc_trait_selection."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_ty_utils."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_ty_utils";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_ty_utils");
    dependencies = {
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_infer = rustPackages."unknown".rustc_infer."0.0.0" { inherit profileName; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      rustc_trait_selection = rustPackages."unknown".rustc_trait_selection."0.0.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "unknown".rustc_type_ir."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_type_ir";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_type_ir");
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
    };
  });
  
  "unknown".rustc_typeck."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_typeck";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/compiler/rustc_typeck");
    dependencies = {
      rustc_arena = rustPackages."unknown".rustc_arena."0.0.0" { inherit profileName; };
      rustc_ast = rustPackages."unknown".rustc_ast."0.0.0" { inherit profileName; };
      rustc_attr = rustPackages."unknown".rustc_attr."0.0.0" { inherit profileName; };
      rustc_data_structures = rustPackages."unknown".rustc_data_structures."0.0.0" { inherit profileName; };
      rustc_errors = rustPackages."unknown".rustc_errors."0.0.0" { inherit profileName; };
      rustc_graphviz = rustPackages."unknown".rustc_graphviz."0.0.0" { inherit profileName; };
      rustc_hir = rustPackages."unknown".rustc_hir."0.0.0" { inherit profileName; };
      rustc_hir_pretty = rustPackages."unknown".rustc_hir_pretty."0.0.0" { inherit profileName; };
      rustc_index = rustPackages."unknown".rustc_index."0.0.0" { inherit profileName; };
      rustc_infer = rustPackages."unknown".rustc_infer."0.0.0" { inherit profileName; };
      rustc_lint = rustPackages."unknown".rustc_lint."0.0.0" { inherit profileName; };
      rustc_macros = buildRustPackages."unknown".rustc_macros."0.1.0" { profileName = "__noProfile"; };
      rustc_middle = rustPackages."unknown".rustc_middle."0.0.0" { inherit profileName; };
      rustc_serialize = rustPackages."unknown".rustc_serialize."0.0.0" { inherit profileName; };
      rustc_session = rustPackages."unknown".rustc_session."0.0.0" { inherit profileName; };
      rustc_span = rustPackages."unknown".rustc_span."0.0.0" { inherit profileName; };
      rustc_target = rustPackages."unknown".rustc_target."0.0.0" { inherit profileName; };
      rustc_trait_selection = rustPackages."unknown".rustc_trait_selection."0.0.0" { inherit profileName; };
      rustc_ty_utils = rustPackages."unknown".rustc_ty_utils."0.0.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366"; };
    dependencies = {
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.3" { inherit profileName; };
    };
  });
  
  "unknown".rustdoc."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustdoc";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/librustdoc");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustdoc/jemalloc" || rootFeatures' ? "rustdoc-tool/jemalloc") "jemalloc")
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.0" { inherit profileName; };
      askama = rustPackages."registry+https://github.com/rust-lang/crates.io-index".askama."0.11.0" { inherit profileName; };
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      minifier = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minifier."0.0.43" { inherit profileName; };
      pulldown_cmark = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pulldown-cmark."0.9.1" { inherit profileName; };
      rayon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.1" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustdoc_json_types = rustPackages."unknown".rustdoc-json-types."0.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.3" { inherit profileName; };
      tracing_tree = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-tree."0.2.0" { inherit profileName; };
    };
    devDependencies = {
      expect_test = rustPackages."registry+https://github.com/rust-lang/crates.io-index".expect-test."1.0.1" { inherit profileName; };
    };
  });
  
  "unknown".rustdoc-json-types."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustdoc-json-types";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/rustdoc-json-types");
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
    devDependencies = {
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
    };
  });
  
  "unknown".rustdoc-themes."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustdoc-themes";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rustdoc-themes");
  });
  
  "unknown".rustdoc-tool."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rustdoc-tool";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rustdoc");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustdoc-tool/jemalloc") "jemalloc")
    ];
    dependencies = {
      rustdoc = rustPackages."unknown".rustdoc."0.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustfix."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "rustfix";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f2c50b74badcddeb8f7652fa8323ce440b95286f8e4b64ebfd871c609672704e"; };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustfix."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "rustfix";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f0be05fc0675ef4f47119dc39cfc46636bb77d4fc4ef1bd851b9c3f7697f32a"; };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
    };
  });
  
  "unknown".rustfmt-config_proc_macro."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rustfmt-config_proc_macro";
    version = "0.2.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rustfmt/config_proc_macro");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustfmt-config_proc_macro/debug-with-rustfmt") "debug-with-rustfmt")
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
    devDependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "unknown".rustfmt-nightly."1.4.38" = overridableMkRustCrate (profileName: rec {
    name = "rustfmt-nightly";
    version = "1.4.38";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/rustfmt");
    features = builtins.concatLists [
      [ "cargo-fmt" ]
      [ "default" ]
      (lib.optional (rootFeatures' ? "rustfmt-nightly/generic-simd") "generic-simd")
      [ "rustfmt-format-diff" ]
    ];
    dependencies = {
      annotate_snippets = rustPackages."registry+https://github.com/rust-lang/crates.io-index".annotate-snippets."0.8.0" { inherit profileName; };
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      bytecount = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytecount."0.6.2" { inherit profileName; };
      cargo_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.14.0" { inherit profileName; };
      derive_new = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive-new."0.5.8" { profileName = "__noProfile"; };
      diff = rustPackages."registry+https://github.com/rust-lang/crates.io-index".diff."0.1.12" { inherit profileName; };
      dirs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs."2.0.2" { inherit profileName; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.8.4" { inherit profileName; };
      getopts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getopts."0.2.21" { inherit profileName; };
      ignore = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ignore."0.4.17" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustc_workspace_hack = rustPackages."unknown".rustc-workspace-hack."1.0.0" { inherit profileName; };
      rustfmt_config_proc_macro = buildRustPackages."unknown".rustfmt-config_proc_macro."0.2.0" { profileName = "__noProfile"; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" { inherit profileName; };
      structopt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".structopt."0.3.25" { inherit profileName; };
      term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".term."0.6.1" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" { inherit profileName; };
      unicode_segmentation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.6.0" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.8" { inherit profileName; };
      unicode_categories = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode_categories."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "rustversion";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61b3909d758bb75c79f23d4736fac9433868679d3ad2ea7a61e3c25cfda9a088"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "same-file";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "schannel";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f05ba609c234e60bee0d547fe94a4c7e9da733d1c962cf6e59efa4cd9c8bc75"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "scoped-tls";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".security-framework."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "security-framework";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1759c2e3c8580017a484a7ac56d3abc5a6c1feadf88db2f3633f12ae4268c69"; };
    features = builtins.concatLists [
      [ "OSX_10_9" ]
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.0" { inherit profileName; };
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      security_framework_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "security-framework-sys";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f99b9d5e26d2a71633cc4f2ebae7cc9f874044e0c351a27e17892d76dce5678b"; };
    features = builtins.concatLists [
      [ "OSX_10_9" ]
    ];
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5f3aac57ee7f3272d8395c6e4f502f434f0e289fcd62876f70daa008c20dcabe"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.125";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "558dc50e1a5a5fa7112ca2ce4effcb321b0300c0d4ccf0776a9f60cd89031171"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
      [ "serde_derive" ]
      [ "std" ]
    ];
    dependencies = {
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.125" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.125" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.125";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b093b7a2bb58203b5da3056c05b4ec1fed827dcfdb37347a8841695263b3d06d"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_ignored."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "serde_ignored";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1c2c7d39d14f2f2ea82239de71594782f186fd03501ac81f0ce08e674819ff2f"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.59" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.59";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dcac07dbffa1c65e7f816ab9eba78eb142c6d44410f4eeba1e26e4f5dfa56b95"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "indexmap" ]
      [ "preserve_order" ]
      [ "raw_value" ]
      [ "std" ]
      [ "unbounded_depth" ]
    ];
    dependencies = {
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.6" { inherit profileName; };
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.5" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_repr."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "serde_repr";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2dc6b7951b17b051f3210b063f12cc17320e2fe30ae05b0fe2a3abb068551c76"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha-1."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "sha-1";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df"; };
    dependencies = {
      block_buffer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.7.3" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" { inherit profileName; };
      fake_simd = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fake-simd."0.1.2" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha-1."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "sha-1";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "028f48d513f9678cda28f6e4064755b3fbb2af6acd672f2c209b62323f7aea0f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" then "cpufeatures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.1" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "99c3bd8169c58782adad9290a9af5939994036b76187f7b4f0e6de91dbbfc0ec"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.1" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "sharded-slab";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79c719719ee05df97490f80a45acfc99e5a30ce98a1e4fb67aee422745ae14e3"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shell-escape."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "shell-escape";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "45bb67a18fa91266cc7807181f62f9178a6873bfad7dc788c42e6430db40184f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shlex."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "shlex";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "42a568c8f2cd051a4d283bd6eb0343ac214c1b0f1ac19f93e1175b2dee38c73d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.2.2" = overridableMkRustCrate (profileName: rec {
    name = "signal-hook-registry";
    version = "1.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce32ea0c6c56d5eacaeb814fbed9960547021d3edd010ded1425f180536b20ab"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "siphasher";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa8f3741c7372e75519bd9346068370c9cdaabcc1f9599cbcf2a2719352286b7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sized-chunks."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "sized-chunks";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "65e65d6a9f13cd78f361ea5a2cf53a45d67cdda421ba0316b9be101560f3d207"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bitmaps = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitmaps."2.1.0" { inherit profileName; };
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.12.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ecab6c735a6bb4139c0caafd0cc3635748bbb3acf4550e8138122099251f309"; };
    features = builtins.concatLists [
      [ "const_generics" ]
      [ "may_dangle" ]
      [ "union" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snap."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "snap";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da73c8f77aebc0e40c300b93f0a5f1bece7a248a36eee287d4e095f35c7b7d6e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "socket2";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "765f090f0e423d2b55843402a07915add955e7d60657db13707a159727326cad"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "stable_deref_trait";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stacker."0.1.14" = overridableMkRustCrate (profileName: rec {
    name = "stacker";
    version = "0.1.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90939d5171a4420b3ff5fbc8954d641e7377335454c259dcb80786f3f21dc9b4"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      psm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".psm."0.1.16" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".std."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "std";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/std");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "std/addr2line" || rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "addr2line")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace") "backtrace")
      (lib.optional (rootFeatures' ? "std/compiler-builtins-c" || rootFeatures' ? "test/compiler-builtins-c") "compiler-builtins-c")
      (lib.optional (rootFeatures' ? "std/compiler-builtins-mangled-names" || rootFeatures' ? "test/compiler-builtins-mangled-names") "compiler-builtins-mangled-names")
      (lib.optional (rootFeatures' ? "std/compiler-builtins-mem" || rootFeatures' ? "test/compiler-builtins-mem") "compiler-builtins-mem")
      (lib.optional (rootFeatures' ? "std/compiler-builtins-no-asm" || rootFeatures' ? "test/compiler-builtins-no-asm") "compiler-builtins-no-asm")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/gimli-symbolize" || rootFeatures' ? "test/backtrace") "gimli-symbolize")
      (lib.optional (rootFeatures' ? "std/llvm-libunwind" || rootFeatures' ? "test/llvm-libunwind") "llvm-libunwind")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/miniz_oxide" || rootFeatures' ? "test/backtrace") "miniz_oxide")
      (lib.optional (rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/object" || rootFeatures' ? "test/backtrace") "object")
      (lib.optional (rootFeatures' ? "std/panic-unwind") "panic-unwind")
      (lib.optional (rootFeatures' ? "std/panic_immediate_abort" || rootFeatures' ? "test/panic_immediate_abort") "panic_immediate_abort")
      (lib.optional (rootFeatures' ? "std/panic-unwind" || rootFeatures' ? "std/panic_unwind" || rootFeatures' ? "test/default" || rootFeatures' ? "test/panic-unwind") "panic_unwind")
      (lib.optional (rootFeatures' ? "std/profiler" || rootFeatures' ? "test/profiler") "profiler")
      (lib.optional (rootFeatures' ? "std/profiler" || rootFeatures' ? "std/profiler_builtins" || rootFeatures' ? "test/profiler") "profiler_builtins")
      (lib.optional (rootFeatures' ? "std/std_detect_dlsym_getauxval" || rootFeatures' ? "test/default" || rootFeatures' ? "test/std_detect_dlsym_getauxval") "std_detect_dlsym_getauxval")
      (lib.optional (rootFeatures' ? "std/std_detect_env_override" || rootFeatures' ? "test/std_detect_env_override") "std_detect_env_override")
      (lib.optional (rootFeatures' ? "std/std_detect_file_io" || rootFeatures' ? "test/default" || rootFeatures' ? "test/std_detect_file_io") "std_detect_file_io")
      (lib.optional (rootFeatures' ? "std/system-llvm-libunwind" || rootFeatures' ? "test/system-llvm-libunwind") "system-llvm-libunwind")
    ];
    dependencies = {
      ${ if rootFeatures' ? "std/addr2line" || rootFeatures' ? "std/backtrace" || rootFeatures' ? "test/backtrace" then "addr2line" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.16.0" { inherit profileName; };
      alloc = rustPackages."unknown".alloc."0.0.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      core = rustPackages."unknown".core."0.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.vendor.name == "fortanix" && hostPlatform.parsed.abi.name == "sgx" then "dlmalloc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlmalloc."0.2.3" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-fortanix-unknown-sgx" then "fortanix_sgx_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fortanix-sgx-abi."0.3.3" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.2.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/miniz_oxide" || rootFeatures' ? "test/backtrace" then "miniz_oxide" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "std/backtrace" || rootFeatures' ? "std/object" || rootFeatures' ? "test/backtrace" then "object" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.26.2" { inherit profileName; };
      panic_abort = rustPackages."unknown".panic_abort."0.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "std/panic-unwind" || rootFeatures' ? "std/panic_unwind" || rootFeatures' ? "test/default" || rootFeatures' ? "test/panic-unwind" then "panic_unwind" else null } = rustPackages."unknown".panic_unwind."0.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "std/profiler" || rootFeatures' ? "std/profiler_builtins" || rootFeatures' ? "test/profiler" then "profiler_builtins" else null } = rustPackages."unknown".profiler_builtins."0.0.0" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" { inherit profileName; };
      std_detect = rustPackages."unknown".std_detect."0.1.5" { inherit profileName; };
      unwind = rustPackages."unknown".unwind."0.0.0" { inherit profileName; };
      ${ if hostPlatform.config == "wasm32-wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; };
    };
    devDependencies = {
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
    };
  });
  
  "unknown".std_detect."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "std_detect";
    version = "0.1.5";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/stdarch/crates/std_detect");
    features = builtins.concatLists [
      [ "alloc" ]
      [ "compiler_builtins" ]
      [ "core" ]
      (lib.optional (rootFeatures' ? "std/std_detect_dlsym_getauxval" || rootFeatures' ? "std/std_detect_env_override" || rootFeatures' ? "std/std_detect_file_io" || rootFeatures' ? "test/default" || rootFeatures' ? "test/std_detect_dlsym_getauxval" || rootFeatures' ? "test/std_detect_env_override" || rootFeatures' ? "test/std_detect_file_io") "libc")
      [ "rustc-dep-of-std" ]
      (lib.optional (rootFeatures' ? "std/std_detect_dlsym_getauxval" || rootFeatures' ? "test/default" || rootFeatures' ? "test/std_detect_dlsym_getauxval") "std_detect_dlsym_getauxval")
      (lib.optional (rootFeatures' ? "std/std_detect_env_override" || rootFeatures' ? "test/std_detect_env_override") "std_detect_env_override")
      (lib.optional (rootFeatures' ? "std/std_detect_file_io" || rootFeatures' ? "test/default" || rootFeatures' ? "test/std_detect_file_io") "std_detect_file_io")
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      ${ if rootFeatures' ? "std/std_detect_dlsym_getauxval" || rootFeatures' ? "std/std_detect_env_override" || rootFeatures' ? "std/std_detect_file_io" || rootFeatures' ? "test/default" || rootFeatures' ? "test/std_detect_dlsym_getauxval" || rootFeatures' ? "test/std_detect_env_override" || rootFeatures' ? "test/std_detect_file_io" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      alloc = rustPackages."unknown".rustc-std-workspace-alloc."1.99.0" { inherit profileName; };
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".string_cache."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "string_cache";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2940c75beb4e3bf3a494cef919a747a2cb81e52571e212bfbd185074add7208a"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      debug_unreachable = rustPackages."registry+https://github.com/rust-lang/crates.io-index".new_debug_unreachable."1.0.4" { inherit profileName; };
      phf_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.8.0" { inherit profileName; };
      precomputed_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".precomputed-hash."0.1.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".string_cache_codegen."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "string_cache_codegen";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f24c8e5e19d22a726626f1a5e16fe15b132dcf21d10177fa5a45ce7962996b97"; };
    dependencies = {
      phf_generator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_generator."0.8.0" { inherit profileName; };
      phf_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".phf_shared."0.8.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strip-ansi-escapes."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "strip-ansi-escapes";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d63676e2abafa709460982ddc02a3bb586b6d15a49b75c212e06edd3933acee"; };
    dependencies = {
      vte = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vte."0.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".structopt."0.3.25" = overridableMkRustCrate (profileName: rec {
    name = "structopt";
    version = "0.3.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "40b9788f4202aa75c240ecc9c15c65185e6a39ccdeb0fd5d008b98825464c87c"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      structopt_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".structopt-derive."0.4.18" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".structopt-derive."0.4.18" = overridableMkRustCrate (profileName: rec {
    name = "structopt-derive";
    version = "0.4.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dcb5ae327f9cc13b68763b5749770cb9e048a99bd9dfdfa58d0cf05d5f64afe0"; };
    dependencies = {
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.1" { inherit profileName; };
      proc_macro_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strum."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "strum";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57bd81eb48f4c437cadc685403cad539345bf703d78e63707418431cecd4522b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "strum_macros";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87c85aa3f8ea653bfd3ddf25f7ee357ee4d204731f6aa9ad04002306f6e2774c"; };
    dependencies = {
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.80";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d010a1623fbd906d51d650a9916aaefc05ffa0e4053ff7fe601167f3e715d194"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "fold" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      [ "visit" ]
      [ "visit-mut" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" = overridableMkRustCrate (profileName: rec {
    name = "synstructure";
    version = "0.12.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tar."0.4.37" = overridableMkRustCrate (profileName: rec {
    name = "tar";
    version = "0.4.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d6f5515d3add52e0bbdcad7b83c388bb36ba7b754dda3b5f5bc2d38640cdba5c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "xattr" ]
    ];
    dependencies = {
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.14" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.isUnix then "xattr" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xattr."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tempfile."3.2.0" = overridableMkRustCrate (profileName: rec {
    name = "tempfile";
    version = "3.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dac1c663cfc93810f88aed9b8941d48cabf856a1b111c29a40439018d870eb22"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" { inherit profileName; };
      remove_dir_all = rustPackages."registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tendril."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "tendril";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "707feda9f2582d5d680d733e38755547a3e8fb471e7ba11452ecfd9ce93a5d3b"; };
    dependencies = {
      futf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futf."0.1.4" { inherit profileName; };
      mac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mac."0.1.1" { inherit profileName; };
      utf8 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf-8."0.7.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".term."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "term";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      dirs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs."2.0.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".term."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "term";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c59df8ac95d96ff9bede18eb7300b0fda5e5d8d90960e76f8e14ae765eedbf1f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      dirs_next = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-next."2.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "rustversion" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.5" { profileName = "__noProfile"; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" = overridableMkRustCrate (profileName: rec {
    name = "termcolor";
    version = "1.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2dfed899f0eb03f32ee8c6a0aabdb8a7949659e3466561fc0adf54e26d88c5f4"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".termize."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "termize";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1706be6b564323ce7092f5f7e6b118a14c8ef7ed0e69c8c5329c914a9f101295"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".test."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "test";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/test");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "test/backtrace") "backtrace")
      (lib.optional (rootFeatures' ? "test/compiler-builtins-c") "compiler-builtins-c")
      (lib.optional (rootFeatures' ? "test/compiler-builtins-mangled-names") "compiler-builtins-mangled-names")
      (lib.optional (rootFeatures' ? "test/compiler-builtins-mem") "compiler-builtins-mem")
      (lib.optional (rootFeatures' ? "test/compiler-builtins-no-asm") "compiler-builtins-no-asm")
      (lib.optional (rootFeatures' ? "test/default") "default")
      (lib.optional (rootFeatures' ? "test/llvm-libunwind") "llvm-libunwind")
      (lib.optional (rootFeatures' ? "test/default" || rootFeatures' ? "test/panic-unwind") "panic-unwind")
      (lib.optional (rootFeatures' ? "test/panic_immediate_abort") "panic_immediate_abort")
      (lib.optional (rootFeatures' ? "test/profiler") "profiler")
      (lib.optional (rootFeatures' ? "test/default" || rootFeatures' ? "test/std_detect_dlsym_getauxval") "std_detect_dlsym_getauxval")
      (lib.optional (rootFeatures' ? "test/std_detect_env_override") "std_detect_env_override")
      (lib.optional (rootFeatures' ? "test/default" || rootFeatures' ? "test/std_detect_file_io") "std_detect_file_io")
      (lib.optional (rootFeatures' ? "test/system-llvm-libunwind") "system-llvm-libunwind")
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      core = rustPackages."unknown".core."0.0.0" { inherit profileName; };
      getopts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getopts."0.2.21" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      panic_abort = rustPackages."unknown".panic_abort."0.0.0" { inherit profileName; };
      panic_unwind = rustPackages."unknown".panic_unwind."0.0.0" { inherit profileName; };
      proc_macro = rustPackages."unknown".proc_macro."0.0.0" { inherit profileName; };
      std = rustPackages."unknown".std."0.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tester."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "tester";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0639d10d8f4615f223a57275cf40f9bdb7cfbb806bcb7f7cc56e3beb55a576eb"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      getopts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getopts."0.2.21" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
      term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".term."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".textwrap."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "textwrap";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060"; };
    dependencies = {
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".textwrap."0.14.2" = overridableMkRustCrate (profileName: rec {
    name = "textwrap";
    version = "0.14.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0066c8d12af8b5acd21e00547c3797fde4e8677254a7ee429176ccebbe93dd80"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "854babe52e4df1653706b98fcfc05843010039b406875930a70e4d9644e5c417"; };
    dependencies = {
      thiserror_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.30" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.30" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa32fd3f627f367fe16f893e2597ae3c05020f8bba2666a4e6ea73d377e5714b"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thorin-dwp."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "thorin-dwp";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd95b4559c196987c8451b4e14d08a4c796c2844f9adf4d2a2dbc9b3142843be"; };
    dependencies = {
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.26.1" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.28.1" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" = overridableMkRustCrate (profileName: rec {
    name = "thread_local";
    version = "1.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180"; };
    dependencies = {
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.7.2" { inherit profileName; };
    };
  });
  
  "unknown".tidy."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tidy";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/tidy");
    dependencies = {
      cargo_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.14.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.6" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" { inherit profileName; };
    };
  });
  
  "unknown".tier-check."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tier-check";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/tier-check");
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tikv-jemalloc-sys."0.4.1+5.2.1-patched" = overridableMkRustCrate (profileName: rec {
    name = "tikv-jemalloc-sys";
    version = "0.4.1+5.2.1-patched";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a26331b05179d4cb505c8d6814a7e18d298972f0a551b0e3cefccff927f86d3"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "rustc-main/jemalloc" || rootFeatures' ? "rustc-main/tikv-jemalloc-sys") "background_threads_runtime_support")
      (lib.optional (rootFeatures' ? "rustc-main/jemalloc" || rootFeatures' ? "rustc-main/tikv-jemalloc-sys") "default")
      (lib.optional (rootFeatures' ? "rustc-main/jemalloc" || rootFeatures' ? "rustc-main/tikv-jemalloc-sys") "unprefixed_malloc_on_supported_platforms")
    ];
    dependencies = {
      ${ if rootFeatures' ? "rustc-main/jemalloc" || rootFeatures' ? "rustc-main/tikv-jemalloc-sys" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "rustc-main/jemalloc" || rootFeatures' ? "rustc-main/tikv-jemalloc-sys" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "rustc-main/jemalloc" || rootFeatures' ? "rustc-main/tikv-jemalloc-sys" then "fs_extra" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".fs_extra."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time."0.1.43" = overridableMkRustCrate (profileName: rec {
    name = "time";
    version = "0.1.43";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca8a50ef2360fbd1eeb0ecd46795a87a19024eb4b53c5dc916ca1fd95fe62438"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "238ce071d267c5710f9d31451efec16c5ee22de34df17cc05e56cbc92e967117"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio."1.8.4" = overridableMkRustCrate (profileName: rec {
    name = "tokio";
    version = "1.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50dae83881bc9b0403dd5b44ea9deed3e939856cc8722d5be37f0d6e5c6d53dd"; };
    features = builtins.concatLists [
      [ "bytes" ]
      [ "default" ]
      [ "io-util" ]
      [ "libc" ]
      [ "memchr" ]
      [ "mio" ]
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc") "net")
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc") "num_cpus")
      [ "once_cell" ]
      [ "process" ]
      [ "rt" ]
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc") "rt-multi-thread")
      [ "signal-hook-registry" ]
      [ "sync" ]
      [ "time" ]
      [ "winapi" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.0.1" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      mio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.7.14" { inherit profileName; };
      ${ if rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc" then "num_cpus" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.7.2" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      ${ if hostPlatform.isUnix then "signal_hook_registry" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.2.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.7" = overridableMkRustCrate (profileName: rec {
    name = "tokio-stream";
    version = "0.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b2f3f698253f03119ac0102beaa64f67a67e08074d03a22d18784104543727f"; };
    features = builtins.concatLists [
      [ "default" ]
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc") "net")
      [ "time" ]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.19" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.6.7" = overridableMkRustCrate (profileName: rec {
    name = "tokio-util";
    version = "0.6.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1caa0b0c8d94a049db56b5acf8cba99dc0623aab1b26d5b5f5e2d945846b3592"; };
    features = builtins.concatLists [
      [ "codec" ]
      (lib.optional (rootFeatures' ? "rls/default" || rootFeatures' ? "rls/ipc" || rootFeatures' ? "rls-ipc/client" || rootFeatures' ? "rls-ipc/jsonrpc-ipc-server" || rootFeatures' ? "rls-ipc/server" || rootFeatures' ? "rls-rustc/ipc") "default")
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.0.1" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.19" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.19" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml."0.5.7" = overridableMkRustCrate (profileName: rec {
    name = "toml";
    version = "0.5.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "75cf45bb0bef80604d001caaec0d09da99611b3c0fd39d3080468875cdb65645"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "toml_edit";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "744e9ed5b352340aa47ce033716991b5589e23781acb97cad37d4ea70560f55b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "easy" ]
      [ "serde" ]
    ];
    dependencies = {
      combine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".combine."4.6.3" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.1" { inherit profileName; };
      kstring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kstring."1.0.6" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".topological-sort."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "topological-sort";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa7c7f42dea4b1b99439786f5633aeb9c14c1b53f75e282803c2ec2ad545873c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "tower-service";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "360dfd1d6d30e05fda32ace2c8c70e9c0a9da713275777f5a4dbb8a1893930c6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "375a639232caf30edfc78e8d89b2d4c375515393e7af7e16f01cd96917fb2105"; };
    features = builtins.concatLists [
      [ "attributes" ]
      [ "default" ]
      (lib.optional (rootFeatures' ? "rustc-main/max_level_info" || rootFeatures' ? "rustc_driver/max_level_info" || rootFeatures' ? "rustc_log/max_level_info") "max_level_info")
      [ "std" ]
      [ "tracing-attributes" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      tracing_attributes = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.18" { profileName = "__noProfile"; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.18" = overridableMkRustCrate (profileName: rec {
    name = "tracing-attributes";
    version = "0.1.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4f480b8f81512e825f337ad51e94c1eb5d3bbdf2b363dcd01e2b19a9ffe3f8e"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.30" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.7" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.80" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.21" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f4ed65637b8390770814083d20756f87bfa2c21bf2f110babdc5438351746e4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "lazy_static" ]
      [ "std" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "tracing-log";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a6923477a48e41c1951f1999ef8bb5a3023eb723ceadafe78ffb65dc366761e3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "log-tracer" ]
      [ "std" ]
      [ "trace-logger" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "tracing-subscriber";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "245da694cc7fc4729f3f418b304cb57789f1bed2a78c575407ab8a23f53cb4d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "ansi" ]
      [ "ansi_term" ]
      [ "default" ]
      [ "env-filter" ]
      [ "fmt" ]
      [ "lazy_static" ]
      [ "matchers" ]
      [ "parking_lot" ]
      [ "regex" ]
      [ "registry" ]
      [ "sharded-slab" ]
      [ "smallvec" ]
      [ "std" ]
      [ "thread_local" ]
      [ "tracing" ]
      [ "tracing-log" ]
    ];
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      matchers = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchers."0.1.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      sharded_slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.1" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.7.0" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.29" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.21" { inherit profileName; };
      tracing_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-tree."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "tracing-tree";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3ce989c9962c7f61fe084dd4a230eec784649dfc2392467c790007c3a6e134e7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "tracing-log" ]
    ];
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.21" { inherit profileName; };
      tracing_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.2" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typenum."1.12.0" = overridableMkRustCrate (profileName: rec {
    name = "typenum";
    version = "1.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "373c8a200f9e67a0c95e62a4f52fbf80c23b4381c05a17845531982fa99e6b33"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ucd-parse."0.1.8" = overridableMkRustCrate (profileName: rec {
    name = "ucd-parse";
    version = "0.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5269f8d35df6b8b60758343a6d742ecf09e4bca13faee32af5503aebd1e11b7c"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ucd-trie."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "ucd-trie";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unic-char-property."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "unic-char-property";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8c57a407d9b6fa02b4795eb81c5b6652060a15a7903ea981f3d723e6c0be221"; };
    dependencies = {
      unic_char_range = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unic-char-range."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unic-char-range."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "unic-char-range";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0398022d5f700414f6b899e10b8348231abf9173fa93144cbc1a43b9793c1fbc"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unic-common."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "unic-common";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "80d7ff825a6a654ee85a63e80f92f054f904f21e7d12da4e22f9834a4aaa35bc"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unic-emoji-char."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "unic-emoji-char";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b07221e68897210270a38bde4babb655869637af0f69407f96053a34f76494d"; };
    dependencies = {
      unic_char_property = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unic-char-property."0.9.0" { inherit profileName; };
      unic_char_range = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unic-char-range."0.9.0" { inherit profileName; };
      unic_ucd_version = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unic-ucd-version."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unic-ucd-version."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "unic-ucd-version";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96bd2f2237fe450fcd0a1d2f5f4e91711124f7857ba2e964247776ebeeb7b0c4"; };
    dependencies = {
      unic_common = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unic-common."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" = overridableMkRustCrate (profileName: rec {
    name = "unicase";
    version = "2.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6"; };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".unicode-bdd."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "unicode-bdd";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/unicode-table-generator");
    dependencies = {
      ucd_parse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ucd-parse."0.1.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "unicode-bidi";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.13" = overridableMkRustCrate (profileName: rec {
    name = "unicode-normalization";
    version = "0.1.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6fb19cf769fa8c6a80a162df694621ebeb4dafb606470b2b2fce0be40a98a977"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      tinyvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."0.3.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-script."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "unicode-script";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "098ec66172ce21cd55f8bcc786ee209dd20e04eff70acfca30cb79924d173ae9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-security."0.0.5" = overridableMkRustCrate (profileName: rec {
    name = "unicode-security";
    version = "0.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5d87c28edc5b263377e448d6cdcb935c06b95413d8013ba6fae470558ccab18f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      unicode_normalization = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.13" { inherit profileName; };
      unicode_script = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-script."0.5.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "unicode-segmentation";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e83e153d1053cbb5a118eeff7fd5be06ed99153f00dbcd8ae310c5fb2b22edc0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.8" = overridableMkRustCrate (profileName: rec {
    name = "unicode-width";
    version = "0.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3"; };
    features = builtins.concatLists [
      [ "compiler_builtins" ]
      [ "core" ]
      [ "default" ]
      [ "rustc-dep-of-std" ]
      [ "std" ]
    ];
    dependencies = {
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
      std = rustPackages."unknown".rustc-std-workspace-std."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "unicode-xid";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode_categories."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "unicode_categories";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unified-diff."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "unified-diff";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "496a3d395ed0c30f411ceace4a91f7d93b148fb5a9b383d5d4cff7850f048d5f"; };
    dependencies = {
      diff = rustPackages."registry+https://github.com/rust-lang/crates.io-index".diff."0.1.12" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unindent."0.1.7" = overridableMkRustCrate (profileName: rec {
    name = "unindent";
    version = "0.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f14ee04d9415b52b3aeab06258a3f07093182b88ba0f9b8d203f211a7a7d41c7"; };
  });
  
  "unknown".unstable-book-gen."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "unstable-book-gen";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/src/tools/unstable-book-gen");
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.12" { inherit profileName; };
      tidy = rustPackages."unknown".tidy."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".unwind."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "unwind";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/library/unwind");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "std/llvm-libunwind" || rootFeatures' ? "test/llvm-libunwind" || rootFeatures' ? "unwind/llvm-libunwind") "llvm-libunwind")
      (lib.optional (rootFeatures' ? "std/system-llvm-libunwind" || rootFeatures' ? "test/system-llvm-libunwind" || rootFeatures' ? "unwind/system-llvm-libunwind") "system-llvm-libunwind")
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      core = rustPackages."unknown".core."0.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.69" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".url."1.7.2" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "1.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd4e7c0d531266369519a4aa4f399d748bd37043b00bde1e4ff1f60a120b355a"; };
    dependencies = {
      idna = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.1.5" { inherit profileName; };
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."1.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "2.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a507c383b2d33b5fc35d1861e77e6b383d158b2da5e14fe51b83dfedf6fd578c"; };
    features = builtins.concatLists [
      [ "serde" ]
    ];
    dependencies = {
      form_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.0.1" { inherit profileName; };
      idna = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.2.0" { inherit profileName; };
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.8" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.125" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".utf-8."0.7.5" = overridableMkRustCrate (profileName: rec {
    name = "utf-8";
    version = "0.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05e42f7c18b8f902290b009cde6d651262f956c98bc51bca4cd1d511c9cd85c7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "utf8parse";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8772a4ccbb4e89959023bc5b7cb8623a795caa7092d99f3aa9501b9484d4557d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "vcpkg";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6454029bf181f092ad1b853286f23e2c507d8e8194d01d92da4a55c274a5508c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "vec_map";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vergen."5.1.0" = overridableMkRustCrate (profileName: rec {
    name = "vergen";
    version = "5.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dfbc87f9a7a9d61b15d51d1d3547284f67b6b4f1494ce3fc5814c101f35a5183"; };
    features = builtins.concatLists [
      [ "chrono" ]
      [ "git" ]
      [ "git2" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.51" { inherit profileName; };
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" { inherit profileName; };
      enum_iterator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-iterator."0.6.0" { inherit profileName; };
      getset = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".getset."0.1.1" { profileName = "__noProfile"; };
      git2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".git2."0.14.2" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
    buildDependencies = {
      chrono = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" { profileName = "__noProfile"; };
      rustversion = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.5" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5fecdca9a5291cc2b8dcf7dc02453fee791a280f3743cb0905f8822ae463b3fe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vte."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "vte";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4f42f536e22f7fcbb407639765c8fd78707a33109301f834a594758bedd6e8cf"; };
    dependencies = {
      utf8parse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "walkdir";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d"; };
    dependencies = {
      same_file = rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.9.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.11.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"; };
    features = builtins.concatLists [
      [ "compiler_builtins" ]
      [ "core" ]
      [ "rustc-dep-of-std" ]
      [ "rustc-std-workspace-alloc" ]
    ];
    dependencies = {
      compiler_builtins = rustPackages."registry+https://github.com/rust-lang/crates.io-index".compiler_builtins."0.1.70" { inherit profileName; };
      rustc_std_workspace_alloc = rustPackages."unknown".rustc-std-workspace-alloc."1.99.0" { inherit profileName; };
      core = rustPackages."unknown".rustc-std-workspace-core."1.99.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"; };
    features = builtins.concatLists [
      [ "accctrl" ]
      [ "aclapi" ]
      [ "basetsd" ]
      [ "cfg" ]
      [ "consoleapi" ]
      [ "debugapi" ]
      [ "errhandlingapi" ]
      [ "evntrace" ]
      [ "fibersapi" ]
      [ "fileapi" ]
      [ "handleapi" ]
      [ "impl-default" ]
      [ "in6addr" ]
      [ "inaddr" ]
      [ "ioapiset" ]
      [ "jobapi" ]
      [ "jobapi2" ]
      [ "knownfolders" ]
      [ "libloaderapi" ]
      [ "lmcons" ]
      [ "memoryapi" ]
      [ "minschannel" ]
      [ "minwinbase" ]
      [ "minwindef" ]
      [ "mstcpip" ]
      [ "mswsock" ]
      [ "namedpipeapi" ]
      [ "ntdef" ]
      [ "ntsecapi" ]
      [ "ntstatus" ]
      [ "objbase" ]
      [ "processenv" ]
      [ "processthreadsapi" ]
      [ "profileapi" ]
      [ "psapi" ]
      [ "schannel" ]
      [ "securitybaseapi" ]
      [ "shellapi" ]
      [ "shlobj" ]
      [ "sspi" ]
      [ "std" ]
      [ "synchapi" ]
      [ "sysinfoapi" ]
      [ "threadpoollegacyapiset" ]
      [ "timezoneapi" ]
      [ "userenv" ]
      [ "winbase" ]
      [ "wincon" ]
      [ "wincred" ]
      [ "wincrypt" ]
      [ "windef" ]
      [ "winerror" ]
      [ "winioctl" ]
      [ "winnt" ]
      [ "winreg" ]
      [ "winsock2" ]
      [ "winuser" ]
      [ "ws2def" ]
      [ "ws2ipdef" ]
      [ "ws2tcpip" ]
    ];
    dependencies = {
      ${ if hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xattr."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "xattr";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "244c3741f4240ef46274860397c7c74e50eb23624996930e484c16679633a54c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "unsupported" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.116" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xml5ever."0.16.1" = overridableMkRustCrate (profileName: rec {
    name = "xml5ever";
    version = "0.16.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b1b52e6e8614d4a58b8e70cf51ec0cc21b256ad8206708bcff8139b5bbd6a59"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      mac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mac."0.1.1" { inherit profileName; };
      markup5ever = rustPackages."registry+https://github.com/rust-lang/crates.io-index".markup5ever."0.10.1" { inherit profileName; };
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.1.43" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xz2."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "xz2";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c179869f34fc7c01830d3ce7ea2086bc3a07e0d35289b667d0a8bf910258926c"; };
    dependencies = {
      lzma_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lzma-sys."0.1.16" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yaml-merge-keys."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "yaml-merge-keys";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd236a7dc9bb598f349fe4a8754f49181fee50284daa15cd1ba652d722280004"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      yaml_rust = rustPackages."registry+https://github.com/rust-lang/crates.io-index".yaml-rust."0.4.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yaml-rust."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "yaml-rust";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e66366e18dc58b46801afbf2ca7661a9f59cc8c5962c29892b6039b4f86fa992"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yaml-rust."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "yaml-rust";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39f0c922f1a334134dc2f7a8b67dc5d25f0735263feec974345ff706bcf20b0d"; };
    dependencies = {
      linked_hash_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yansi-term."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "yansi-term";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe5c30ade05e61656247b2e334a031dfd0cc466fadef865bdcdea8d537951bf1"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
}
